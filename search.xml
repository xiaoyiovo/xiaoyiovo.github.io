<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在Google Pixel 3上安装Magisk</title>
      <link href="/2023/10/30/InstallMagiskOnGooglePixel3/"/>
      <url>/2023/10/30/InstallMagiskOnGooglePixel3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作为七年iOS用户，上次用安卓手机已经是很久以前了，最近在B站看到TESTV的索尼ZX1C的评测感觉很心动，但是去海鲜市场发现大多数的ZX1C都是日版运营商合约机，似乎不能解BL锁，于是在评论地下又发现GoolePixel3这款机器。在早些年前就看过Pixel的测评，原生安卓系统很是吸引我，并且也没有OEM锁可以随意折腾，所以就在海鲜市场以500左右的价格淘到了一个成色不错的Pixel3。到手后也是被细腻的动画折服了，但是Pixel3不支持中国电信运营商，需要安装解锁运营商的模块才可以使用，而模块依赖于Magisk，遂产生此想法。在收集资料的过程中发现网上的教程或多或少都有些模糊，因此决定在此非常详细的介绍我的安装步骤，也是希望能给机圈做些贡献吧。</p><hr><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>To be continued……</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Magisk安装 </tag>
            
            <tag> Google Pixel 3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第三章_第四节</title>
      <link href="/2023/09/05/Note-CPP-3-4/"/>
      <url>/2023/09/05/Note-CPP-3-4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="用getchar和putchar函数进行字符的输入和输出"><a href="#用getchar和putchar函数进行字符的输入和输出" class="headerlink" title="用getchar和putchar函数进行字符的输入和输出"></a>用getchar和putchar函数进行字符的输入和输出</h2><p>除了可以用cin和cout语句输出和输出字符外，C++还保留了C语言中用于输入和输出单个字符的函数，使用很方便。其中最常用的有getchar函数和putchar函数。  </p><h3 id="putchar函数（字符输出函数）"><a href="#putchar函数（字符输出函数）" class="headerlink" title="putchar函数（字符输出函数）"></a>putchar函数（字符输出函数）</h3><p>putchar函数的作用是向终端输出一个字符，例如：</p><blockquote><p>putchar (c);</p></blockquote><p>它输出变量c的值。</p><p>例：输出单个字符</p><p><strong>编写程序</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> char1, char2, char3;</span><br><span class="line">    char1 = <span class="string">&#x27;B&#x27;</span>; char2 = <span class="string">&#x27;O&#x27;</span>; char3 = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">    <span class="built_in">putchar</span>(char1); <span class="built_in">putchar</span>(char2); <span class="built_in">putchar</span>(char3); <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">66</span>); <span class="built_in">putchar</span>(<span class="number">79</span>); <span class="built_in">putchar</span>(<span class="number">89</span>); <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><p>BOY</p><p>BOY</p><p>可以看到，用putchar可以输出转义字符，<code>putchar(&#39;\n&#39;)</code>的作用是输出一个换行符，使输出的当前位置移到下一行的开头。<code>putchar(66)</code>的作用是将66作为ASCII码转换为字符输出，66是字母’B‘的ASCII码，因此<code>putchar(66)</code>输出字母‘B’。其余类似。<code>putchar(10)</code>中的10是换行符的ASCII码，<code>putchar(10)</code>输出一个换行符，作用 与<code>putchar(&#39;\n&#39;)</code>相同。</p><p>也可以输出其他转义字符。如：</p><blockquote><p>putchar(‘\101’)                    &#x2F;&#x2F;输出字符’A‘，八进制的101是’A‘的ASCII码</p><p>putchar(‘\)                           &#x2F;&#x2F;输出单引号字符’</p><p>putchar(‘\015’)                   &#x2F;&#x2F;输出回车，不换行，使输出的当前位置移到本行开头</p></blockquote><h3 id="getchar函数（字符输入函数）"><a href="#getchar函数（字符输入函数）" class="headerlink" title="getchar函数（字符输入函数）"></a>getchar函数（字符输入函数）</h3><p>此函数的作用是从终端（或系统隐含指定的输入设备）输入一个字符。getchar函数没有参数，其一般形式为</p><blockquote><p>getchar ( )</p></blockquote><p>函数的值就是从输入设备得到的字符。</p><p>例：输入单个字符</p><p><strong>编写程序</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> input1;</span><br><span class="line">    input1 = <span class="built_in">getchar</span>(); <span class="built_in">putchar</span>(input1 + <span class="number">32</span>); <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在运行时，如果从键盘输入大写字母‘A’并按回车键，就会在屏幕上输出小写字母‘a’。请注意，<code>getchar()</code>只能接收一个字符。getchar函数得到的字符可以赋给一个字符变量或整型变量，也可以不赋给任何变量，作为表达式的一部分。例如，上面的程序中的第6行可以用下面一行代替：</p><blockquote><p>putchar(getchar( ) + 32);putchar(‘\n’);</p></blockquote><p>因为getchar（）读人的值为’A’，’A’＋32是小写字母’a’的ASCII码，因此 putchar函数输出 ‘a’。此时不必定义变量input1。</p><p>也可以用cout输出 getchar 函数得到字符的ASCII的值：</p><blockquote><p>cout &lt;&lt; getchar( );</p></blockquote><p>这时输出的是整数97，因为用<code>getchar()</code>读入的实际上是字符的ASCII码，现在并未把它赋给一个字符变量，cout就按整数形式输出。如果改成:</p><blockquote><p>cout &lt;&lt; (char1 &#x3D; getchar( ));        &#x2F;&#x2F;设char1已定义为字符变量</p></blockquote><p>则输出字母’a‘，因为要求输出字符变量c的值。</p><p>可以看到，用putchar和getchar 函数输出和输入字符十分灵活方便，由于它们是函数，所以可以出现在表达式中，例如：</p><blockquote><p>cout &lt;&lt; (c&#x3D;getchar( ) + 32);</p></blockquote><h2 id="用scanf和printf函数进行输入和输出（非常不推荐）"><a href="#用scanf和printf函数进行输入和输出（非常不推荐）" class="headerlink" title="用scanf和printf函数进行输入和输出（非常不推荐）"></a>用scanf和printf函数进行输入和输出（非常不推荐）</h2>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第三章_第三节</title>
      <link href="/2023/09/01/Note-CPP-3-3/"/>
      <url>/2023/09/01/Note-CPP-3-3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="输入流与输出流的基本操作"><a href="#输入流与输出流的基本操作" class="headerlink" title="输入流与输出流的基本操作"></a>输入流与输出流的基本操作</h2><p>cout语句一般格式为</p><blockquote><p>cout &lt;&lt; 表达式1 &lt;&lt; 表达式2 &lt;&lt; … &lt;&lt;表达式n;</p></blockquote><p>cin语句一般格式为</p><blockquote><p>cout &gt;&gt; 变量1 &gt;&gt; 变量2 &gt;&gt; … &gt;&gt;变量n;</p></blockquote><p>在定义流对象时，系统会在内存中开辟一段缓冲区，用来暂存输入输出流的数据。在执行cout语句时，并不是插入一个数据就马上输出一个数据，而是先把插入的数据顺序存放在输出缓冲区中，直到输出缓冲区满或遇到cout 语句中的<code>endl</code>（或<code>\n</code>,<code>ends</code>，<code>flush</code>）为止，此时将缓冲区中已有的数据一起输出，并清空缓冲区。系统提供的标准输出流中的数据向系统默认的设备（一般为显示器）输出。</p><p>一个cout 语句可以分写成若干行。比如：</p><blockquote><p>cout &lt;&lt; “This is a C++ program.” &lt;&lt; endl;</p></blockquote><p>同样也可以这样写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;This is&quot;</span>           <span class="comment">//注意行末尾无分号</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;a C++&quot;</span></span><br><span class="line">&lt;&lt; <span class="string">&quot;program.&quot;</span></span><br><span class="line">&lt;&lt; endl;                    <span class="comment">//语句最后有分号</span></span><br></pre></td></tr></table></figure><p>也可以写成多个cout语句，即：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&quot;This is&quot;</span>;        <span class="comment">//语句末尾有分号</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a C++&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;program.&quot;</span>;</span><br><span class="line">cout &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>由于前两个cout语句中的字符串最后没有换行符，因此下一行的字符紧接着上一行的末尾输出。</p><p>以上3种情况的输出均为:</p><p><em>This is a C++ program.</em></p><p>注意：不能用一个插入运算符“&lt;&lt;”插入多个输出项，如下面写法是错误的：</p><blockquote><p>cout &lt;&lt; a,b,c;            &#x2F;&#x2F;错误，不能一次插入多项</p></blockquote><p>但是</p><blockquote><p>cout &lt;&lt; a + b + c;      &#x2F;&#x2F;正确，这是一个表达式，作为一个输出项则是正确的</p></blockquote><p>在用cout输出时，用户不必通知计算机按何种类型输出，系统会自动判别输出数据的类型，使输出的数据按相应的类型输出。如已定义a为int型，b为float型，c为char型，则</p><blockquote><p>cout &lt;&lt; a &lt;&lt;’ ‘&lt;&lt; b &lt;&lt;’ ‘&lt;&lt; c &lt;&lt; endl;        &#x2F;&#x2F;a&#x3D;4 b&#x3D;345.789 c&#x3D;a</p></blockquote><p>会以下面的形式输出：</p><blockquote><p>4 345.789 a</p></blockquote><p>与cout类似，一个cin语句可以分写成若干行。比如：</p><blockquote><p>cin &gt;&gt; a &gt;&gt; b &gt;&gt; C &gt;&gt; d;</p></blockquote><p>还可以这样写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cin &gt;&gt; a            <span class="comment">//注意行末尾无分号</span></span><br><span class="line">    &gt;&gt; b            <span class="comment">//这样写可能看起来清晰些</span></span><br><span class="line">    &gt;&gt; c</span><br><span class="line">    &gt;&gt;d;</span><br></pre></td></tr></table></figure><p>也可以这样写</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cin &gt;&gt; a;</span><br><span class="line">cin &gt;&gt; b;</span><br><span class="line">cin &gt;&gt; c;</span><br><span class="line">cin &gt;&gt; d;</span><br></pre></td></tr></table></figure><p>以上3种情况均可以从键盘输入：</p><p><em>1 2 3 4</em></p><p>也可以分多行输入数据：</p><p><em>1</em></p><p><em>2 3</em></p><p><em>4</em></p><p>在用cin输入时，系统也会根据变量的类型从输入流中提取相应长度的字节。如有</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> c1,c2;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">float</span> b;</span><br><span class="line">cin &gt;&gt; c1 &gt;&gt; c2 &gt;&gt; a &gt;&gt; b;</span><br></pre></td></tr></table></figure><p>如果输入</p><p><em>1234 56.78</em></p><p>系统会取第1个字符“1”给字符变量c1，取第2个字符“2”给字符变量c2，再取34给整型变量a，最后取56.78给实型变量b。注意：34后面应该有空格以便和56.78分隔开。也可按下面格式输入：</p><p><em>1 2 34 56.78</em>                      （在1和2中间有空格）</p><p>在从输入流中提取了字符“1”送给c1后，遇到第2个字符，是一个空格，系统把空格作为数据间的分隔符，不予提取而提取后面一个字符“2”送给c2，然后再分别提取34和56.78给a和b。由此可知：不能用cin语句把空格字符和回车换行符作为字符输入给字符变量，它们将被跳过。如果想将空格字符或回车换行符（或任何其他键盘上的字符）输入给字符变量，可以后面介绍的介绍的getchar函数。</p><p>在组织输入流数据时，要仔细分析cin语句中变量的类型，按照相应的格式输入，否则容易出错。</p><h2 id="在标准输入流与输出流中使用控制符（操纵符）"><a href="#在标准输入流与输出流中使用控制符（操纵符）" class="headerlink" title="在标准输入流与输出流中使用控制符（操纵符）"></a>在标准输入流与输出流中使用控制符（操纵符）</h2><p>如上介绍到使用cin和cout时的默认格式。但有时候人们输入输出时有一些特殊的要求，如在输出实数时规定字段宽度，只保留两位小数，数据向左或向右对齐等。C++提供了在标准输入输出流中的控制符（操纵符），见下表：</p><table><thead><tr><th align="left">控制符（操纵符）</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left">dec</td><td align="left">设置数值的基数为10</td></tr><tr><td align="left">hex</td><td align="left">设置数值的基数为16</td></tr><tr><td align="left">oct</td><td align="left">设置数值的基数为8</td></tr><tr><td align="left">setfill(c)</td><td align="left">设置填充字符c，c可以是字符常量或字符变量</td></tr><tr><td align="left">setprecision(n)</td><td align="left">设置浮点数的精度为n位。在以一般十进制小数形式输出时，n代表有效数字。在fixed（固定小数位数）形式和scientific（指数）形式输出时，n为小数位数</td></tr><tr><td align="left">setw(n)</td><td align="left">设置字段宽度为n位</td></tr><tr><td align="left">setiosflags(ios::fixed)</td><td align="left">设置浮点数以固定的小数位数显示</td></tr><tr><td align="left">setiosflags(ios::scientific)</td><td align="left">设置浮点数以科学计数发（即指数形式）显示</td></tr><tr><td align="left">setiosflags(ios::left)</td><td align="left">输出数据左对齐</td></tr><tr><td align="left">setiosflags(ios::right)</td><td align="left">输出数据右对齐</td></tr><tr><td align="left">setiosflags(ios::skipws)</td><td align="left">忽略前导的空格</td></tr><tr><td align="left">setiosflags(ios::uppercase)</td><td align="left">数据以十六进制形式输出时字母以大写表示</td></tr><tr><td align="left">setiosflags(ios::lowercase)</td><td align="left">数据以十六进制输出时字母以小写表示</td></tr><tr><td align="left">setiosflags(ios::showpos)</td><td align="left">输出正数时给出“+”号</td></tr></tbody></table><p>需要注意的是，如果使用了控制符，在程序单位开头除了要加iostream头文件外，还要加iomanip头文件。</p><p>各位读者可能对上面的控制符表示方式不习惯，对其作用记不住。其实从英文字面上看，是很好理解并容易记住的。例如setfill，其中set是“设置”，fill是“填充”，setprecision中的precision是“精度”的意思。setw中的w是“宽度”（width的缩写），setiosflags中的ios是iostream（输入输出流）的缩写，flags的含义是“标志”，fixed是“固定的”，scientific是“科学的（计数法）“，showpos是show positive（显示正号）等。</p><p>例：输出双精度数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> a = <span class="number">123.456789012345</span>;                              <span class="comment">//对a赋初值</span></span><br><span class="line">cout &lt;&lt; a;                                                <span class="comment">//输出：123.456</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">9</span>)&lt;&lt;a;                                 <span class="comment">//输出：123.456789 </span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">6</span>);                                    <span class="comment">//恢复默认格式（精度为6）</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::fixed);                            <span class="comment">//输出：123.456789</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::fixed)&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">8</span>)&lt;&lt;a;        <span class="comment">//输出：123.45678901</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::scientific)&lt;&lt;a;                    <span class="comment">//输出：1.234568e+02</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::scientific)&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">4</span>)&lt;&lt;a;   <span class="comment">//输出：1.2346e02</span></span><br></pre></td></tr></table></figure><p>第2行为按默认格式输出（以十进制小数形式输出，全部有效数字为6位）。第3行指定输出9位有效数字。第4行恢复默认格式，精度为6。第5行要求以固定小数位输出，默认输出6位小数。第6行指定输出8位小数。第7行指定按指数形式输出，默认给出6位小数（第7位小数四舍五入）。第6行以指数形式输出，指定4位小数。</p><p>下面是整数输出的例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> b = <span class="number">123456</span>;                        <span class="comment">//对b赋初始值</span></span><br><span class="line">cout &lt;&lt; b;                             <span class="comment">//输出：123456</span></span><br><span class="line">cout&lt;&lt;hex&lt;&lt;b;                          <span class="comment">//输出:1e240</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::uppercase)&lt;&lt;b;  <span class="comment">//输出:1E240</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setw</span>(<span class="number">10</span>)&lt;&lt;b&lt;&lt;<span class="string">&#x27;,&#x27;</span>&lt;&lt;b;             <span class="comment">//输出:123456,123456</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setfill</span>(<span class="string">&#x27;*&#x27;</span>)&lt;&lt;<span class="built_in">setw</span>(<span class="number">10</span>)&lt;&lt;b;       <span class="comment">//输出:****123456</span></span><br><span class="line">cout&lt;&lt;<span class="built_in">setiosflags</span>(ios::showpos)&lt;&lt;b;    <span class="comment">//输出:+123456</span></span><br></pre></td></tr></table></figure><p>第2行按十进制整数形式输出。第3行按十六进制整数形式输出，其中字母“e”代表十六进制中的14。第4行按十六进制形式输出，字母e改为大写。第5行指定字段宽为10，在123456前留4个空格。紧接着再输出一次b，但由于setw 只对其后第1个数据起作用，因此在输出第2个b时setw（10）不起作用，按默认方式输出，前面不留空格。第6行在输出时用＇＊＇代替空格。第7行在正数前面加一个“＋”号。</p><p>如果在多个cout语句中使用相同的<code>setw(n)</code>，并使用<code>setiosflags(ios::right)</code>，可以实 现各行数据右对齐，如果指定相同的精度，可以实现上下小数点对齐。</p><p>例：使各行小数点对齐。</p><p><strong>编写程序</strong>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;<span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> num1 = <span class="number">123.456</span>, num2 = <span class="number">3.14159</span>, num3 = <span class="number">-3214.16</span>;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setiosflags</span>(ios::fixed) &lt;&lt; <span class="built_in">setiosflags</span>(ios::right) &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">2</span>);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">setw</span>(<span class="number">10</span>) &lt;&lt; num3 &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p>   123.46        （字段宽度为10，右对齐，取两位小数）</p><p>       3.14</p><p>-3214.67</p><p>先统一设置定点形式输出、取两位小数，右对齐。<strong>这些设置对之后的输出均有效，除非重新设置</strong>，<strong>而setw只对其后的一个输出项有效</strong>，因此必须在输出num1、num2、num3之前都要写setw(10)。</p><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>由于篇幅原因，有关C++中使用getchar和putchar进行字符的输入和输出等相关内容，将在下章呈现。快速跳转到下一篇文章<a href="(https://xiaoyiovo.top/2023/09/05/Note-CPP-3-4/">C++学习笔记_第三章_第四节</a></p><hr><h1 id="To-be-continued……"><a href="#To-be-continued……" class="headerlink" title="To be continued……"></a>To be continued……</h1>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第三章_第二节</title>
      <link href="/2023/08/20/Note-CPP-3-2/"/>
      <url>/2023/08/20/Note-CPP-3-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="赋值操作"><a href="#赋值操作" class="headerlink" title="赋值操作"></a>赋值操作</h1><p>前面已介绍，对一个变量的赋值是通过赋值运算符“＝”来实现的。在前面两章中已经多次用到赋值语句，由于赋值语句应用十分普遍，所以专门再讨论一下。</p><ol><li>C＋＋的赋值语句具有其他高级语言（如QBASIC，Pascal，FORTRAN）的赋值语 句的功能。但不同的是：C＋＋中的赋值号“＝”是一个赋值运算符，可以写成</li></ol><blockquote><p>a&#x3D;b&#x3D;c&#x3D;d; </p></blockquote><p>它相当于</p><blockquote><p>a&#x3D;(b&#x3D;c&#x3D;d);</p></blockquote><p>其作用是先将变量d的值赋给变量c，再把变量c的值赋给变量b，最后把变量b的值赋 给变量a。</p><p>而在其他大多数语言中赋值号不是运算符，上面的写法是不合法的。</p><ol start="2"><li>关于赋值表达式与赋值语句的概念。其他多数高级语言没有“赋值表达式”这 一概念。在C＋＋中，赋值表达式可以包括在其他表达式之中，例如，</li></ol><blockquote><p>if((a&#x3D;b)&gt;0)cout&lt;&lt;”a&gt;0”&lt;&lt;endl;</p></blockquote><p>按语法规定if后面的（）内是一个条件，例如可以是“if（x＞0）···”。现在在x的位置上换 上一个赋值表达式<code>a＝b</code>，其作用是：先进行赋值运算（将b的值赋给a），然后判断a是否大于0，如大于0，执行<code>cout&lt;&lt;&quot;a&gt;0&quot;&lt;&lt;endl;</code>。在if语句中的“a＝b”不是赋值语 句而是赋值表达式，这样写是合法的。不能写成</p><blockquote><p>if ( (a&#x3D;b;)&gt;0 ) cout &lt;&lt; “a&gt;0” &lt;&lt; endl;</p></blockquote><p>因为在if的条件中不能包含赋值语句。C＋＋把赋值语句和赋值表达式区别开来，增加了 表达式的种类，使表达式的应用几乎“无孔不入”，能实现其他语言中难以实现的功能。 </p><hr><h1 id="C-的输入与输出"><a href="#C-的输入与输出" class="headerlink" title="C++的输入与输出"></a>C++的输入与输出</h1><p>在前面两章中，已经看到了在C++程序中方便地利用cout和cin进行输出和输入。应该说明：输入和输出并不是C++语言中的正式组成成分。C和C++本身都没有为输入和输出提供专门的语句结构。在C语言中，输入和输出的功能是通过调用scanf函数和printf函数来实现的，在C++中是通过调用输入输出流库中的流对象cin和cout实现的。也就是说，输入输出不是由C++本身定义的，而是在编译系统提供的I&#x2F;O库中定义的。</p><p>C++的输出和输入是用“<strong>流</strong>”（stream）的方式实现的。“流”指的是来自设备或传给 设备的一个<strong>数据流</strong>。数据流是由一系列字节组成的，这些字节是按进入“流”的顺序排列 的。<strong>cout是输出流对象</strong>的名字，<strong>cin是输入流对象</strong>的名字，“&lt;&lt;”是<strong>流插入运算符**（也可 称流插入操作符），其作用是将需要输出的内容插入到输出流中，默认的输入设备是显示 器。“&gt;&gt;”是</strong>流提取运算符**，其作用是从默认的输入设备（一般为键盘）的输入流中提取 若干个字节送到计算机内存区中指定的变量。下两图表示C++通过流进行输 入和输出的过程。</p><p><img src="/2023/08/20/Note-CPP-3-2/1.png" alt="通过流进行输入"></p><p><img src="/2023/08/20/Note-CPP-3-2/2.png" alt="通过流进行输出"></p><p>有关流对象cin，cout和流运算符的定义等信息是存放在C++的输入输出流库中的，因此如果在程序中使用cin，cout和流运算符，就必须使用预处理指令把头文件stream包含到本文件中：</p><blockquote><p>#include <iostream></iostream></p></blockquote><p>从这一点也可以看出，cin和cout不是C＋＋本身提供的语句，因为使用C++本身提供的语句（如赋值语句、if语句、for语句等）时，是不需要用＃include指令包含有关头文件的。</p><p>尽管cin和cout不是C++本身提供的语句，但是在不致混淆的情况下，为了叙述方便，常常把由cin和流提取运算符“＞＞”实现输入的语句称为输入语句或cin语句，把由cout和流插入运算符“＜＜”实现输出的语句称为输出语句或cout语句。根据C++的语法，凡是能实现某种操作而且最后以分号结束的都是语句。</p><p>因此，在阅读书刊或讨论问题时，当谈到输入语句或输出语句时，我们应当对它们的含义有准确的理解。</p><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>由于篇幅原因，有关C++输入流与输出流的基本操作等相关内容，将在下章呈现。快速跳转到下一篇文章<a href="https://xiaoyiovo.top/2023/09/01/Note-CPP-3-3/">C++学习笔记_第三章_第三节</a></p><hr><h1 id="To-be-continued……"><a href="#To-be-continued……" class="headerlink" title="To be continued……"></a>To be continued……</h1>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第三章_第一节</title>
      <link href="/2023/08/16/Note-CPP-3-1/"/>
      <url>/2023/08/16/Note-CPP-3-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-的程序结构和C-语句"><a href="#C-的程序结构和C-语句" class="headerlink" title="C++的程序结构和C++语句"></a>C++的程序结构和C++语句</h1><p>在第1章中介绍了几个简单的C＋＋程序。第2章介绍了C＋＋程序中用到的一些基本要素（常量、变量、运算符和表达式等），它们是构成程序的基本成分。本章将接着介绍为编写简单的程序所必须掌握的一些内容。</p><p>从第1章已知，一个程序包含一个或多个程序单位（每个程序单位构成一个程序文件）。每一个程序单位由以下3个部分组成：</p><ol><li><p>预处理指令。如＃include指令和＃define指令。</p></li><li><p>全局声明。在函数外对数据类型、函数以及变量的声明和定义。</p></li><li><p>函数。包括函数首部和函数体，在函数体中可以包含声明语句和执行语句。</p></li></ol><p>下面是一个完整的C++程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span>    <span class="comment">//预处理指令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;  <span class="comment">//在函数之外的全局声明</span></span><br><span class="line"><span class="type">int</span> a=<span class="number">3</span>;              <span class="comment">//在函数之外的全局声明</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>            <span class="comment">//函数首部</span></span></span><br><span class="line"><span class="function"></span>&#123;                    </span><br><span class="line">    <span class="type">float</span> b;          <span class="comment">//函数内的声明</span></span><br><span class="line">    b=<span class="number">4.5</span>;            <span class="comment">//执行语句</span></span><br><span class="line">    cout&lt;&lt;a&lt;&lt;b;       <span class="comment">//执行语句</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;         <span class="comment">//执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果一个变量在函数之外进行声明，此变量是全局变量</strong>，它的有效范围是从该行开始到本程序单位结束。如果一个变量在函数内声明，此变量是局部变量，它的有效范围是从该行开始到本函数结束。C＋＋程序结构可以用下图表示：</p><p><img src="/2023/08/16/Note-CPP-3-1/1.png" alt="C++程序结构"></p><p>程序应该包括数据描述（由声明语句来实现）和数据操作（由执行语句来实现）。数据描述主要包括数据类型的声明、函数和变量的定义、变量的初始化等。数据操作的任务是对已提供的数据进行加工。</p><p>C++程序中最小的独立单位是语句（statement）。它相当于一篇文章中的一个句子。句子是用句号结束的，而C++语句一般是用分号结束的（复合语句是以右花括号结束的）。</p><p>C++语句可以分为以下4种。</p><ol><li><strong>声明语句</strong></li></ol><p>如</p><blockquote><p>int a,b;</p></blockquote><ol start="2"><li><strong>执行语句</strong></li></ol><p>通知计算机完成一定的操作。执行语句包括：</p><ul><li><strong>控制语句</strong>，完成一定的控制功能。C++有 9 种控制语句，它们是：</li></ul><table><thead><tr><th>语句</th><th>含义</th></tr></thead><tbody><tr><td>if ( ) ～ else ～</td><td>条件选择语句</td></tr><tr><td>for ( ) ～</td><td>循环语句</td></tr><tr><td>while ( ) ~</td><td>循环语句</td></tr><tr><td>do ~ while ( )</td><td>循环语句</td></tr><tr><td>continue</td><td>结束本次循环语句</td></tr><tr><td>break</td><td>中止执行 switch 或循环语句</td></tr><tr><td>switch</td><td>多分支选择语句</td></tr><tr><td>goto</td><td>转向语句</td></tr><tr><td>return</td><td>从函数返回语句</td></tr></tbody></table><p>上面9种语句中的括号 ( ) 表示其中包括一个判断条件，～表示内嵌的语句。例如，<code>if ( ) ～ else ～</code>的具体语句可以写成</p><blockquote><p>if(x&gt;0) cout &lt;&lt;x; else cout &lt;&lt;-x;    &#x2F;&#x2F;当 x&gt;0 成立时，输出 x 的值</p></blockquote><ul><li><strong>函数和流对象调用语句</strong>。函数调用语句由一次函数调用加一个分号构成一个语句，例如</li></ul><blockquote><p>sort(x,y,z);    &#x2F;&#x2F;假设已定义了sort函数，它有3个参数</p><p>cout&lt;&lt;x&lt;&lt;endl;    &#x2F;&#x2F;流对象调用语句</p></blockquote><ul><li><strong>表达式语句</strong> 。由一个表达式加一个分号构成一个语句。最典型的是：由赋值表达式构成一个赋值语句。</li></ul><blockquote><p>i&#x3D;i+1    &#x2F;&#x2F;是一个赋值表达式，末尾没有分号</p><p>i&#x3D;i+1;    &#x2F;&#x2F;是一个赋值语句，末尾有分号</p></blockquote><p><strong>任何一个表达式的最后加一个分号都可以成为一个语句。一个语句必须在最后出现 分号，分号是语句中不可缺少的一部分</strong>。<code>x＋y;</code>也是一个语句，作用是完成x + y的操 作，它是合法的，但是并不把x + y的和赋给另一变量，所以它并无实际意义。</p><ol start="3"><li>空语句</li></ol><p>下面是一个空语句：</p><blockquote><p>;</p></blockquote><p>即只有一个分号的语句，它什么也不做。有时用来做被转向点，或循环语句中的循环体 （循环体是空语句，表示循环体什么也不做）。</p><ol start="4"><li>复合语句</li></ol><p>可以用{ }把一些语句括起来成为复合语句。如下面是一个复合语句。 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    z=x+y;</span><br><span class="line">    <span class="keyword">if</span>(z&gt;<span class="number">100</span>)z=z<span class="number">-100</span>;</span><br><span class="line">    cout&lt;&lt;z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本章中将介绍几种顺序执行的语句，在执行这些语句的过程中不会发生流程的控制转移。</p><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上，是笔者整理的自我认为本章内重要的内容，内容多数来自《C++程序设计（第三版）》中的第三章内容，希望可以帮助到正在阅读本片文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第二章_第五节</title>
      <link href="/2023/08/10/Note-CPP-2-5/"/>
      <url>/2023/08/10/Note-CPP-2-5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="逗号运算符和逗号表达式"><a href="#逗号运算符和逗号表达式" class="headerlink" title="逗号运算符和逗号表达式"></a>逗号运算符和逗号表达式</h1><p>C＋＋提供一种特殊的运算符—逗号运算符，又称为“顺序求值运算符”。用它将两个表达式连接起来。如</p><blockquote><p>3 + 5,6 + 8</p></blockquote><p>是一个逗号表达式。逗号表达式的一般形式为</p><blockquote><p>表达式1，表达式2</p></blockquote><p><strong>逗号表达式的求解过程是：先求解表达式1，再求解表达式2。整个逗号表达式的值是表达式2的值</strong>。例如，上面的逗号表达式“3＋5，6＋8”的值为14。又如，逗号表达式</p><blockquote><p>a &#x3D; 3 * 5,a * 4</p></blockquote><p>对此表达式的求解，读者可能会有两种不同的理解：一种理解认为<code>3 * 5,a * 4</code>是一个逗号表达式，先求出此逗号表达式的值，如果a的原值为3，则逗号表达式的值为12，将12赋给a，因此最后a的值为12。另一种理解认为：<code>a = 3 * 5</code>是一个赋值表达式，<code>a * 4</code>是另一个表达式，二者用逗号相连，构成一个逗号表达式。这两种理解哪一种对呢？<strong>实际上：赋值运算符的优先级别高于逗号运算符</strong>，因此应先求解<code>a = 3 * 5</code>（也就是把<code>a = 3 * 5</code>作为一个表达式）。经计算和赋值后得到a的值为15，然后求解<code>a＊4</code>，得60。整个逗号表达式的值为60。</p><p>逗号表达式的一般形式可以扩展为</p><blockquote><p>表达式1,表达式2,表达式3,···,表达式n</p></blockquote><p>它的值为表达式n的值。</p><p>其实，逗号表达式无非是把若干个表达式“串联”起来。在许多情况下，使用逗号表达式的目的只是想分别得到各个表达式的值，而并非一定需要得到和使用整个逗号表达式的值，逗号表达式最常用于循环语句（for语句）中。</p><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上，是笔者整理的自我认为本章内重要的内容，内容多数来自《C++程序设计（第三版）》中的第二章内容，至此，第二章已全部完结，希望可以帮助到正在阅读本片文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第二章_第四节</title>
      <link href="/2023/08/05/Note-CPP-2-4/"/>
      <url>/2023/08/05/Note-CPP-2-4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="赋值运算符和赋值表达式"><a href="#赋值运算符和赋值表达式" class="headerlink" title="赋值运算符和赋值表达式"></a>赋值运算符和赋值表达式</h1><p>赋值符号“＝”就是赋值运算符，它的作用是将一个数据赋给一个变量。如“a＝3”的作用是执行一次赋值操作（或称赋值运算）。把常量3赋给变量a。也可以将一个表达式的值赋给一个变量。</p><h2 id="赋值过程中的类型转换"><a href="#赋值过程中的类型转换" class="headerlink" title="赋值过程中的类型转换"></a>赋值过程中的类型转换</h2><p>如果赋值运算符两侧的类型不一致，但都是数值型或字符型时，在赋值时自动进行类型转换。</p><ol><li><p>将浮点型数据（包括单、双精度）赋给整型变量时，舍弃其小数部分。如i为整型变量，执行“i &#x3D; 3.56”的结果是使i的值为3，在内存中以整数形式存储。</p></li><li><p>将整型数据赋给浮点型变量时，数值不变，但以指数形式存储到变量中。如要执行“f &#x3D; 23”，将23赋给float型变量f，按单精度指数形式存储在f中。如要执行“d &#x3D; 23”，即将23赋给double型变量d，则将23以双精度指数形式存储到d中。</p></li><li><p>将一个double型数据赋给float变量时，要注意数值范围不能溢出。例如：</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> f;</span><br><span class="line"><span class="type">double</span> d=<span class="number">123.456789e100</span>;</span><br><span class="line">f=d;</span><br></pre></td></tr></table></figure><p>就会出现溢出的错误，因为超过了float型的数据范围。</p><ol start="4"><li><p>字符型数据赋给整型变量，将字符的ASCII码赋给整型变量。</p></li><li><p>将一个int，short或long型数据赋给一个char型变量，只将其低8位原封不动地送到char型变量（发生截断）。例如:</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="type">int</span> i=<span class="number">289</span>;</span><br><span class="line">car c; </span><br><span class="line">c = i;         <span class="comment">//将一个int型数据赋给一个char型变量   </span></span><br></pre></td></tr></table></figure><p>赋值情况为下图所示：</p><p><img src="/2023/08/05/Note-CPP-2-4/1.png" alt="赋值情况"></p><p>在变量c的存储单元中存放了00100001，即十进制数33，如果用<code>cout &lt;&lt; c ;</code>输出c的值，将得到字符“!”（其ASCII码为33）。</p><ol start="6"><li>将signed（有符号）型数据赋给长度相同的unsigned（无符号）型变量，将存储单元内容原样照搬（连原有的符号位也作为数值一起传送）。</li></ol><h3 id="例：有符号数据传送给无符号变量"><a href="#例：有符号数据传送给无符号变量" class="headerlink" title="例：有符号数据传送给无符号变量"></a>例：有符号数据传送给无符号变量</h3><p><strong>编写程序</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> a;</span><br><span class="line">    <span class="type">short</span> <span class="type">int</span> b=<span class="number">-1</span>;</span><br><span class="line">    a=b;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a=&quot;</span>&lt;&lt;a&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p>65535</p><p><strong>程序分析</strong></p><p>有的读者可能会感到奇怪：我给b赋的值是—1，怎么会得到65535呢？请看下图所示的赋值情况。</p><p><img src="/2023/08/05/Note-CPP-2-4/2.png"></p><p>-1的补码形式为1111111111111111（即全部16个二进制位均为1），将它传送给a，而a是无符号型变量，16个位全1是十进制的65535。如果b为正值，且在0～32767之间，则赋值后数值不变。</p><p><strong>不同类型的整型数据间的赋值归根到底就是一条：按存储单元中的存储形式直接传送</strong>。未学过补码知识的，对以上的叙述有所了解即可，不必深究。</p><p>C和C＋＋使用灵活，在不同类型数据之间赋值时，常常会出现意想不到的结果，而编译系统并不提示出错，全靠程序员的经验来找出问题。这就要求编程人员对出现问题的原因有所了解，以便迅速排除故障。</p><h2 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h2><p><strong>在赋值符“＝”之前加上其他运算符，可以构成复合运算符</strong>。如果在“＝”前加一个“＋”运算符就成了复合运算符“＋＝”。例如，可以有</p><table><thead><tr><th>符合运算式</th><th>等价于</th></tr></thead><tbody><tr><td>a + &#x3D; 3</td><td>a＝a＋3</td></tr><tr><td>x * &#x3D; y + 8</td><td>x＝x * (y＋8)</td></tr><tr><td>x % &#x3D; 3</td><td>x＝x ％ 3</td></tr></tbody></table><p>以<code>a + = 3</code>为例来说明，它相当于使a进行一次自加3的操作。即先使a加3，再赋给a。同样，<code>x* = y+8</code>的作用是使x乘以（y＋8），再赋给x。</p><h2 id="赋值表达式"><a href="#赋值表达式" class="headerlink" title="赋值表达式"></a>赋值表达式</h2><p>由赋值运算符将一个变量和一个表达式连接起来的式子称为“赋值表达式”。</p><p>它的一般形式为</p><blockquote><p>变量 &#x3D; 表达式</p></blockquote><p>如“a&#x3D;5”是一个赋值表达式。对赋值表达式求解的过程是：先求赋值运算符右侧的“表达式”的值，然后赋给赋值运算符左侧的变量。一个表达式应该有一个值，例如，赋值表达式<code>a = 3*5</code>的值为 15，执行表达式后，变量 a 的值也是 15。</p><p><strong>C++将赋值表达式作为表达式的一种，使赋值操作不仅可以出现在赋值语句中，而且可以以表达式形式出现在其他语句（如输出语句、循环语句等）中</strong>，如，<code>cout &lt;&lt; (a＝b);</code>，如果b的值为3，则输出a的值（也是表达式a＝b的值）为3。在一个语句中完成了赋值和输出双重功能。这是C＋＋语言灵活性的一种表现。</p><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上，是笔者整理的自我认为本章内重要的内容，内容多数来自《C++程序设计（第三版）》中的第二章内容，希望可以帮助到正在阅读本片文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第二章_第三节</title>
      <link href="/2023/07/21/Note-CPP-2-3/"/>
      <url>/2023/07/21/Note-CPP-2-3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-的运算符"><a href="#C-的运算符" class="headerlink" title="C++的运算符"></a>C++的运算符</h1><p>C++的运算符十分丰富,使得C++的运算十分灵活方便。例如把赋值号( &#x3D;)也作为运算符处理,这样,a&#x3D;b&#x3D;c&#x3D;4就是合法的表达式,这是与其他语言不同的。C++提供了以下运算符。</p><ol><li>算术运算符</li></ol><p>+ (加) - (减) * (乘) &#x2F; (除) % (整除求余) ++ (自加) – (自减)</p><ol start="2"><li>关系运算符</li></ol><p>&gt; (大于) &lt; (小于) &#x3D;&#x3D; (等于) &gt;&#x3D; (大于或等于) &lt;&#x3D; (小于或等于)</p><ol start="3"><li>逻辑运算符</li></ol><p>&amp;&amp; (逻辑与) || (逻辑或) ! (逻辑非)</p><ol start="4"><li>位运算符</li></ol><p>&lt;&lt; (按位左移) &gt;&gt; (按位右移) &amp; (按位与) | ( 按位或) &#x2F;\ (按位异或) ~ (按位取反)</p><ol start="5"><li><p>赋值运算符( &#x3D; 及其扩展赋值运算符)</p></li><li><p>条件运算符( ? : )</p></li><li><p>逗号运算符( , )</p></li><li><p>指针运算符( * )</p></li><li><p>引用运算符和地址运算符( &amp; )</p></li><li><p>求字节数运算符( sizeof )</p></li><li><p>强制类型转换运算符( (类型) 或 类型 ( ) )</p></li><li><p>成员运算符( . )</p></li><li><p>指向成员的运算符( -&gt; )</p></li><li><p>下标运算符( [ ] )</p></li><li><p>其他( 如函数调用运算符( ) )</p></li></ol><hr><h1 id="算术运算符与算术表达式"><a href="#算术运算符与算术表达式" class="headerlink" title="算术运算符与算术表达式"></a>算术运算符与算术表达式</h1><h2 id="基本的算术运算符"><a href="#基本的算术运算符" class="headerlink" title="基本的算术运算符"></a>基本的算术运算符</h2><p>+ (加法运算符,或正值运算符。如 3+5,+3)</p><p>- (减法运算符,或负值运算符。如 5-2,-3)</p><p>* (乘法运算符。如3*5)</p><p>&#x2F; (除法运算符。如5&#x2F;3)</p><p>% (模运算符,或称求余运算符, %两侧均应为整型数据，如7%4的值为3)</p><p><strong>注意</strong>，两个整数相除的结果为整数，如5&#x2F;3的结果值为1，舍去小数部分。但是，如果除数或被除数中有一个为负值，则舍人的方向是不固定的。</p><p>如果参与+ ，- ，* ，&#x2F; 运算的两个数中有一个数为float型数据,则运算的结果是double型，因为<strong>C++在运算时对所有float型数据都按double型数据处理</strong>。</p><h2 id="算术表达式和算术运算符的优先级与结合性"><a href="#算术表达式和算术运算符的优先级与结合性" class="headerlink" title="算术表达式和算术运算符的优先级与结合性"></a>算术表达式和算术运算符的优先级与结合性</h2><p>用算术运算符和括号将运算对象（也称操作数）连接起来的、符合C＋＋语法规则的式子，称为C＋＋算术表达式。运算对象包括常量、变量、函数等。例如，下面是一个合法的C＋＋算术表达式：</p><blockquote><p>a*b&#x2F;c-1.5+a</p></blockquote><p>C＋＋语言规定了运算符的优先级和结合性。在求解表达式时，先按运算符的优先级别高低次序执行，例如先乘除后加减。如有表达式a—b＊c，b的左侧为减号，右侧为乘号，而乘号优先于减号，因此，相当于a—（b＊c）。如果在一个运算对象两侧的运算符的优先级别相同，如a—b＋c，则按规定的“结合方向”处理。<br>C＋＋规定了各种运算符的结合方向（结合性），算术运算符的结合方向为“自左至右”，即先左后右，因此b先与减号结合，执行a—b的运算，再执行加c的运算。“自左至右的结合方向”又称“左结合性”，即运算对象先与左面的运算符结合。</p><h2 id="表达式中各类数值型数据间的混合运算"><a href="#表达式中各类数值型数据间的混合运算" class="headerlink" title="表达式中各类数值型数据间的混合运算"></a>表达式中各类数值型数据间的混合运算</h2><p>在表达式中常遇到不同类型数据之间进行运算，如</p><blockquote><p>10+’a’+1.5-8765.1234*b’</p></blockquote><p>在进行运算时，不同类型的数据要先转换成同一类型，然后进行运算。转换的规则如下图所示：</p><p><img src="/2023/07/21/Note-CPP-2-3/1.png" alt="优先级"></p><p>图中横向向左的箭头表示必定的转换，如char和short型数据必先转换为int型，float型数据在运算时一律先转换成double型（即使是两个float型数据相加，也都先转换成 double型，然后再相加）。</p><p>纵向的箭头表示当运算对象为不同类型时转换的方向。例如int型与double型数据进行运算，先将int型的数据转换成double型，然后在两个同类型（double型）数据间进行运算，结果为double型。注意箭头方向只表示数据类型级别的高低，由低向高转换。不要理解为int型先转换成unsignedint型，再转成long型，再转成double型。如果一个int型数据与一个double型数据运算，是直接将 int 型转成 double 型。同理，一个 int 型与一个 long 型数据运算，则先将 int 型转换成 long 型。<br>换言之，如果有一个数据是float型或double型，则另一数据要先转换为double型，运算结果为double型。如果参加运算的两个数据中最高级别为long型，则另一数据先转换为long型，运算结果为long型。其他依此类推。</p><p>假设已指定i为整型变量，f为float变量，d为double型变量，e为long型，有下面表达式：</p><blockquote><p>10+’a’+i*f-d&#x2F;e</p></blockquote><p>运算次序为：①进行10＋’a’的运算，先将’a’转换成整数97，运算结果为107。②进行i*f的运算。先将i与f都转换成double型，运算结果为double型。③整数107与i＊f的积相加。先将整数107转换成双精度数（小数点后加若干个0，即107.000——00），结果为double型。④将变量e转换成double型，d／e结果为double型。⑤将10+’a’+i*f的结 果与d／e的商相减，结果为double型。</p><p>上述的类型转换是由系统自动进行的。</p><h2 id="自增（-）和自减（–）运算符"><a href="#自增（-）和自减（–）运算符" class="headerlink" title="自增（++）和自减（–）运算符"></a>自增（++）和自减（–）运算符</h2><p>在C和C++中，常在表达式中使用自增（++）和自减（–）运算符，它们的作用是使变量的值增1或减1，如：<br>++i（在使用i之前，先使i的值加1，如果i的原值为3，则执行j&#x3D;++i后，j的值为4）</p><p>–i（在使用i之前，先使i的值减1，如果i的原值为3，则执行j＝–i后，j的值为2）</p><p>i++（在使用i之后，i的值加1，如果i的原值为3，则执行j＝i++后，j的值为3，然后i变为4）<br>i–（在使用i之后，使i的值减1，如果i的原值为3，则执行j＝i–后，j的值为3，然后i变为2）<br>粗略地看，++i和i++的作用相当于i＝i+1，但++i和i++不同之处在于++i是先执行i&#x3D;i+1后，再使用i的值；而i++是先使用i的值后，再执行i&#x3D;i+1。如</p><blockquote><p>i&#x3D;3; </p><p>cout &lt;&lt; ++i ;</p></blockquote><p>输出4。 如果改为</p><blockquote><p>cout &lt;&lt; i++ ;</p></blockquote><p>则输出3。</p><p>正确地使用++和–，可以使程序简洁、清晰、高效。</p><p>自增（减）运算符在C＋＋程序中是经常见到的，常用于循环语句中，使循环变量自动加1。也用于指针变量，使指针指向下一个地址。这些将在以后的章节中介绍。</p><h2 id="强制类型转换运算符"><a href="#强制类型转换运算符" class="headerlink" title="强制类型转换运算符"></a>强制类型转换运算符</h2><p>在表达式中不同类型的数据会自动地转换类型，以进行运算。有时程序编制者还可以利用强制类型转换运算符将一个表达式转换成所需类型。例如，</p><table><thead><tr><th>语法</th><th>效果</th></tr></thead><tbody><tr><td>(double)a</td><td>将a转换成double类型</td></tr><tr><td>(int)(x+y)</td><td>将x＋y的值转换成整型</td></tr><tr><td>(float)(5%3)</td><td>将5％3的值转换成float型</td></tr></tbody></table><p>强制类型转换的一般形式为</p><blockquote><p>（<strong>类型名</strong>）（<strong>表达式</strong>）</p></blockquote><p><strong>注意</strong>：如果要进行强制类型转换的对象是一个变量，该变量可以不用括号括起来。如果要进行强制类型转换的对象是一个包含多项的表达式，则表达式应该用括号括起来。如果写成</p><blockquote><p>(int)x+y </p></blockquote><p>则只将x转换成整型，然后与y相加。</p><p>以上强制类型转换的形式是原来C语言使用的形式，C++把它保留了下来，以利于兼容。C++还增加了以下形式：</p><blockquote><p><strong>类型名</strong>（<strong>表达式</strong>）</p></blockquote><p>如</p><blockquote><p>int（x）或 int（x＋y）</p></blockquote><p>类型名不加括号，而变量或表达式用括号括起来。这种形式类似于函数调用。但许多人仍习惯于用第一种形式，把类型名包在括号内，这样比较清楚。</p><p>需要说明的是在强制类型转换时，得到一个所需类型的中间数据，但原来变量的类型未发生变化。例如，</p><blockquote><p>(int)x</p></blockquote><p>如果x原指定为float型，值为3.6，进行强制类型运算后得到一个int型的中间数据，它的值等于3，而x原来的类型和值都不变。</p><h3 id="例：强制类型转换"><a href="#例：强制类型转换" class="headerlink" title="例：强制类型转换"></a>例：强制类型转换</h3><p><strong>编写程序：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> x;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    x=<span class="number">3.6</span>;</span><br><span class="line">    i=(<span class="type">int</span>)x;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;x=&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;,i=&quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><em>x&#x3D;3.6,i&#x3D;3</em></p><p>x的类型仍为float型，值仍等于3.6。</p><p>由上可知，有两种类型转换，第1种是在运算时不必用户指定，系统自动进行的类型转换，如3+6.5，这种转换称为<strong>隐式类型转换</strong>。第2种是<strong>强制类型转换</strong>，也称显式类型转换。当自动类型转换不能实现目的时，可以用强制类型转换。如“％”运算符要求其两侧均为整型量，若x为float型，则“x％3”不合法，必须用“(int) x ％ 3”。强制类型转换运算优先于％运算，因此先进行（int）x的运算，得到一个整型的中间变量，然后再对3求模。此外，在函数调用时，有时为了使实参与形参类型一致，可以用强制类型转换运算符得到一个所需类型的参数。</p><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上，是笔者整理的自我认为本章内重要的内容，内容多数来自《C++程序设计（第三版）》中的第二章内容，希望可以帮助到正在阅读本片文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第二章_第二节</title>
      <link href="/2023/07/15/Note-CPP-2-2/"/>
      <url>/2023/07/15/Note-CPP-2-2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h2><p>变量就是在程序运行中<strong>值</strong>可以改变的量，每一个变量都应该有一个名字，称为<strong>变量名</strong>，并在内存中占据一定的存储单元，并在该存储单元中存放变量的值。<strong>变量名</strong>和<strong>变量值</strong>是两个不同的概念，变量名代表内存中的一个存储单元，在对程序进行编译连接时由系统为其分配地址，在程序中从变量中取值实际上是通过变量名找到相应的内存单元，并从中读取数据。</p><h2 id="变量名命名规则"><a href="#变量名命名规则" class="headerlink" title="变量名命名规则"></a>变量名命名规则</h2><p>首先让我们来了解以下标识符。和其他高级语言一样：<strong>用来标识变量、符号常量、函数、数组、类型等实体名字的有效字符序列称为标识符（identifier）。简单地说，标识符其实就是名字</strong>。变量名就是一种标识符，变量名必须遵循标识符的命名规则。</p><p>C++规定标识符只能由字母、数字、和下划线<code>_</code>组成，且第一个字符必须是字母或者下划线。</p><p>以下是一些合法的标识符，同时也是合法的变量名：</p><p>You，HEY，_day，month，YeAr，xiao_min</p><p>以下是一些不合法的标识符：</p><p>Y.U.M，#123，$555，5E，C++，xiao-hua，ni hao</p><p>注意，在C++中，大写字母和小写字母被认为是两个不同的字符。因此YOU和you是两个不一样的变量名。一般来说，变量名用小写字母来表示，以便辨认。<strong>注意，变量名不能与C++的关键字、系统函数名和类名相同</strong>。以下提供一些国外常用的变量命名格式：</p><ul><li><p>在变量名前怎加一个字母来表示这个变量的数据类型，如：cName，表示这个是一个字符类型的变量。iAge，表示这是一个整形变量。</p></li><li><p>用几个单词来组成一个变量名，用小写字母开头，后面的单词首字母用大写，如：userName，</p></li><li><p>用几个单词来组成一个变量名，每个单词之间用下划线<code>_</code>隔开，如：People’s_Republic of_China，talk_to_myself。</p></li></ul><p>在变量命名时，你可以参考以上比较常用的命名方式，<strong>避免使用A，B，C这种简单变量名，这样会使程序的可读性大大降低，甚至程序编写者自己也搞不懂哪个变量是干什么的！</strong></p><p>C++没有规定标识符的长度，但是各个具体的编译系统都有自己的规定，超过的字符不被识别，请在写程序之前了解所用系统的标识符长度规定。</p><h2 id="声明变量和定义变量"><a href="#声明变量和定义变量" class="headerlink" title="声明变量和定义变量"></a>声明变量和定义变量</h2><p>在C++中，要求每一个变量都必须做声明或者定义，变量只有声明或定义之后才能使用。</p><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>声明变量是用来告诉编译器变量的名称和数据类型，并不为其分配内存</p><p>声明变量的格式为：</p><table><thead><tr><th align="center">extern</th><th align="center">变量的数据类型</th><th align="center">变量名</th></tr></thead><tbody><tr><td align="center">extern</td><td align="center">int</td><td align="center">joe</td></tr></tbody></table><p>例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> joe;      <span class="comment">//声明变量joe</span></span><br></pre></td></tr></table></figure><p>变量的声明有以下含义：</p><ul><li><p>告诉编译器此变量名已经被占用，不能作为其他变量的变量名。</p></li><li><p>告诉编译器，这个变量名已经匹配到一块内存上，下面用到的变量已经在别的文件中被定义，声明可以出现多次。</p></li></ul><p>注意：即使使用了extern关键字，如果变量被赋值，则也是定义，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> joe=<span class="number">654</span>;  <span class="comment">//定义变量joe</span></span><br></pre></td></tr></table></figure><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><p>定义变量用于为变量分配存储空间，还可以为变量指定初始值，<strong>称为变量初始化</strong>，在一个程序中，变量只可以被定义一次。</p><p>定义变量的格式为：</p><table><thead><tr><th align="center">变量的数据类型</th><th align="center">变量名</th></tr></thead><tbody><tr><td align="center">char</td><td align="center">name</td></tr></tbody></table><p>例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> name;                <span class="comment">//定义变量name</span></span><br><span class="line"><span class="type">char</span> name=<span class="string">&#x27;xiao_min&#x27;</span>;     <span class="comment">//定义变量并赋初始值</span></span><br></pre></td></tr></table></figure><p>或是一次性定义多个变量，在每个变量名之间英文逗号<code>,</code>隔开。</p><p>例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> num1,num2,num3; <span class="comment">//定义变量num1,num2,num3的数据类型为单精度浮点型</span></span><br></pre></td></tr></table></figure><p>C要求变量定义应放在所有的执行语句之前，而C++放宽了限制，只要在第一次使用该变量之前进行定义就可以。</p><p>例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> age;</span><br><span class="line">age = <span class="number">5</span>;</span><br><span class="line"><span class="type">float</span> result;</span><br><span class="line">result = <span class="number">90.56</span>;</span><br><span class="line"><span class="type">char</span> name;</span><br><span class="line">name = <span class="string">&#x27;chou&#x27;</span>;</span><br></pre></td></tr></table></figure><p>C++要求对变量做强制定义的目的是：</p><ol><li>没被定义的不作为变量名可以保证程序中变量名的使用正确，例如变量声明如下：</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> age;     <span class="comment">//定义变量age</span></span><br></pre></td></tr></table></figure><p>而在执行语句中错写变量名，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eedge = <span class="number">18</span>;  <span class="comment">//错写age为eedge;</span></span><br></pre></td></tr></table></figure><p>在编译中会检查出eedge未被定义，报错为：“变量eedge未经声明”，便与用户发现错误，避免变量名使用错误。</p><ol start="2"><li><p>每一个变量被指定为一个数据类型，在编译时就可以为其分配相应的存储单元。如指定age为int型，一般的编译系统对其分配四个字节，并按整数的方式存储数据。</p></li><li><p>指定每一变量属于一个特定的类型，便于在编译时根据此来检查该变量进行的运算是否合法。例如整形变量num1和num2，可以进行求余运算：<code>num1 % num2</code>,求余会得到num1&#x2F;num2的余数。如果num1和num2的数据类型为char，则不允许进行这类运算，在编译时会给出有关的错误信息。</p></li></ol><h3 id="对变量赋初始值"><a href="#对变量赋初始值" class="headerlink" title="对变量赋初始值"></a>对变量赋初始值</h3><p>在定义变量时为其赋予一个初始值称为<strong>变量初始化</strong>。初始值可以是一个常量，也可以是一个有确定值的表达式。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">float</span> num1,num2 = <span class="number">156</span>*<span class="number">0.6</span>;     <span class="comment">//变量num2被初始化为93.6，变量num1未被初始化</span></span><br></pre></td></tr></table></figure><p>如果未对变量赋初始值，则该变量的初始值是一个不可预测的值，即该存储单元中当时的内容是不可知的。</p><p>初始化不是在编译阶段完成的，是在程序运行时执行本函数时才赋予初始值的，相当于执行一个赋值语句。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num1 = <span class="number">156</span>;    <span class="comment">//定义变量num1为整形变量并赋予初始值156</span></span><br></pre></td></tr></table></figure><p>相当于执行以下两个语句：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> num1;         <span class="comment">//定义变量num1为整形变量</span></span><br><span class="line">num1 = <span class="number">156</span>;       <span class="comment">//为变量num1赋值156</span></span><br></pre></td></tr></table></figure><h3 id="常变量"><a href="#常变量" class="headerlink" title="常变量"></a>常变量</h3><p>在定义变量时如果加上关键字<code>const</code>，则变量的值在程序运行期间不能被改变，这种变量称为常变量（constant variable）。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> num1 = <span class="number">2</span>;       <span class="comment">//用const关键字来声明此变量的值不能被改变，其值始终为2</span></span><br></pre></td></tr></table></figure><p>定义常变量时必须同时对其初始化，此后其值不能在被改变，常变量不能出现在赋值号的左边。例如上面一句不可以被写成：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> num1;           <span class="comment">//并未对变量num1赋初始值，此语句不合法</span></span><br><span class="line">num = <span class="number">2</span>;                  <span class="comment">//常变量不可以被赋值</span></span><br></pre></td></tr></table></figure><p>可以用表达式对常变量进行初始化，如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> num2=<span class="number">156</span>+<span class="number">65</span> ;   <span class="comment">//常变量num2的值被指定为221</span></span><br></pre></td></tr></table></figure><p>对于常变量来说，<strong>就是在变量的基础上加了一个约束，使其值不可以被改变，因此常变量又称为只读变量（read-only-variable）。</strong></p><p>请区别用#define指令顶定义的符号常量和用const定义的常变量。符号常量只是用一个符号代替一个字符串，在预编译时把所有符号常量替换为所指定的字符串，它没有数据类型，在内存中并不存在以符号常量命名的存储单元。而常变量有变量的特征，它具有数据类型，在内存中存在着以它命名的存储单元，可以用sizeof运算符测出其长度。于一般变量唯一的不同是指定变量的值不能改变。</p><p>用#define指令定义符号常量是C中所采用的方法，C++把它保留了下来，但是C++程序员一般喜欢使用const定义常变量。虽然二者实现的方法不同，但是从<strong>使用</strong>的角度看，都可以认为用一个标识符代表一个常量。</p><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上，是笔者整理的自我认为本章内重要的内容，内容多数来自《C++程序设计（第三版）》中的第二章内容，希望可以帮助到正在阅读本片文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界Crypto1-4题学习笔记</title>
      <link href="/2023/06/18/Adworld-Crypto-1/"/>
      <url>/2023/06/18/Adworld-Crypto-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一题：base64-NO-GFSJ0522"><a href="#第一题：base64-NO-GFSJ0522" class="headerlink" title="第一题：base64 NO.GFSJ0522"></a>第一题：base64 NO.GFSJ0522</h1><p>题目描述：</p><p>元宵节灯谜是一种古老的传统民间观灯猜谜的习俗。 因为谜语能启迪智慧又饶有兴趣，灯谜增添节日气氛，是一项很有趣的活动。 你也很喜欢这个游戏，这不，今年元宵节，心里有个黑客梦的你，约上你青梅竹马的好伙伴小鱼， 来到了cyberpeace的攻防世界猜谜大会，也想着一展身手。<br>你们一起来到了小孩子叽叽喳喳吵吵闹闹的地方，你俩抬头一看，上面的大红灯笼上写着一些奇奇怪怪的 字符串，小鱼正纳闷呢，你神秘一笑，我知道这是什么了。</p><p>题目附件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9</span><br></pre></td></tr></table></figure><p>由题目可知，这题和Base64编码相关，让我们来了解一下Base64编码的一般用途及特征：</p><p>Base64编码通常用于将给定字符串转换为可打印字符形式。，以下为base64编码后字符的特点：</p><ol><li><p>可打印字符：Base64编码将二进制数据转换为一组可打印字符，<strong>包括字母（A-Z，a-z）、数字（0-9）和一些特殊字符（如”+”和”&#x2F;“）</strong>，这样的编码结果可以在文本环境中进行传输和存储。</p></li><li><p>字符集：Base64编码使用64个字符作为基本字符集，因此得名Base64。这个字符集是由标准ASCII字符集中的一些字符组成的，可以确保编码结果在不同系统中的可互操作性。</p></li><li><p>固定长度增加：Base64编码会将原始数据的长度扩展为原始数据的1.25(4&#x2F;3)倍。例如，3个字节的数据编码后将变为4个字符，6个字节的数据编码后将变为8个字符。这种长度扩展是固定的，<strong>因此编码后的数据长度总是4的倍数</strong>。</p></li><li><p>编码而非加密：Base64是一种编码而非加密方法，它的目的是将给定字符串数据转换为可打印字符形式，而不是隐藏或保护数据。Base64编码是可逆的，也就是说可以将编码后的数据解码还原为原始数据。</p></li></ol><p>以上，是base64编码的特征，此时我们只需要在线找一个<a href="http://web.chacuo.net/charsetbase64">Base64解码工具</a>，然后将附件中的字符串输进去后解码，即可得到flag。</p><p><img src="/2023/06/18/Adworld-Crypto-1/png1.png" alt="Base64编码解码网站"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyberpeace&#123;Welcome_to_new_World!&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第二题：Caesar-NO-GFSJ0523"><a href="#第二题：Caesar-NO-GFSJ0523" class="headerlink" title="第二题：Caesar NO.GFSJ0523"></a>第二题：Caesar NO.GFSJ0523</h1><p>题目描述：</p><p>你成功的解出了来了灯谜，小鱼一脸的意想不到“没想到你懂得这么多啊！” 你心里面有点小得意，“那可不是，论学习我没你成绩好轮别的我知道的可不比你少，走我们去看看下一个” 你们继续走，看到前面也是热热闹闹的，同样的大红灯笼高高挂起，旁边呢好多人叽叽喳喳说个不停。你一看 大灯笼，上面还是一对字符，你正冥思苦想呢，小鱼神秘一笑，对你说道，我知道这个的答案是什么了</p><p>题目附件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oknqdbqmoq&#123;kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz&#125;</span><br></pre></td></tr></table></figure><p>由题目可知，这题和凯撒有关，并且我们做的是加密方向的题，那么我们就可以想到凯撒密码，让我来了解一下凯撒密码及其特征：</p><p>凯撒密码是一种简单的替换密码，它将明文中的每个字母按照一个固定的偏移量进行移动，从而得到密文。以下是凯撒密码加密后字符串的一些特征：</p><ol><li>字母位移：凯撒密码将每个字母按照一个固定的偏移量进行移动。通常情况下，偏移量为正数，表示向右移动，偏移量为负数，则表示向左移动。例如，偏移量为1时，明文中的字母A会被加密为B，字母B会被加密为C，以此类推。<strong>偏移量通常为1-26</strong></li><li>字母模式保持：凯撒密码加密后，字母的相对顺序和出现频率会保持不变。如果在明文中某个字母的出现频率较高，那么在密文中对应的字母也会具有较高的频率。</li><li>周期性特征：凯撒密码具有周期性特征，因为字母表是一个循环结构。偏移量为26的倍数时，加密的结果与明文相同，即加密和解密是相同的操作。</li><li>仅加密字母：<strong>凯撒密码只对字母进行替换，对于非字母字符（如数字、标点符号等）会保持不变。</strong></li></ol><p>由以上特征可知，凯撒密码非常容易被穷举破解，我们只需在线找一个<a href="http://www.atoolbox.net/Tool.php?Id=778">凯撒密码加密&#x2F;解密工具</a> ，将密文输进去，偏移量一个一个试，由于有用的偏移量只有1-26，因此全部试完也不需要太多时间，在经过一番尝试后，得到以下结果：</p><p><img src="/2023/06/18/Adworld-Crypto-1/png2.png" alt="凯撒密码加密/解密网站"></p><p>偏移量为12，flag如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyberpeace&#123;you_have_learned_caesar_encryption&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第三题：Morse-NO-GFSJ0524"><a href="#第三题：Morse-NO-GFSJ0524" class="headerlink" title="第三题：Morse  NO.GFSJ0524"></a>第三题：Morse  NO.GFSJ0524</h1><p>题目描述：</p><p>小鱼得意的瞟了你一眼，神神气气的拿走了答对谜语的奖励，你心里暗暗较劲 想着下一个谜题一定要比小鱼更快的解出来。不知不觉你们走到了下一个谜题的地方，这个地方有些奇怪。 上面没什么提示信息，只是刻着一些0和1，感觉有着一些奇怪的规律，你觉得有些熟悉，但是就是想不起来 这些01代表着什么意思。一旁的小鱼看你眉头紧锁的样子，扑哧一笑，对你讲“不好意思我又猜到答案了。”(flag格式为cyberpeace{xxxxxxxxxx},均为小写)</p><p>题目附件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110</span><br></pre></td></tr></table></figure><p>由题目可知，这题摩尔斯有关，由此可想到摩尔斯密码，让我们来了解一下摩尔斯密码及其特征：</p><p>摩尔斯密码是一种使用短音<code>.</code>和长音<code>-</code>来表示字母、数字和标点符号的编码系统。以下是摩尔斯密码的一些特征：</p><ol><li>点划组合：<strong>摩尔斯密码使用点<code>·</code>和划<code>—</code>组合来表示不同的字符。</strong>每个字符由一系列点和划的组合表示，例如字母”E”表示为一个点<code>·</code>，字母”T”表示为一个划<code>—</code>。</li><li>长短变化：摩尔斯密码中，点<code>·</code>和划<code>—</code>的长度不同，点的长度较短，划的长度较长。这种长度的变化是为了方便在听觉传输中的识别和区分。</li><li>字符间间隔：摩尔斯密码中，字符之间用短间隔表示（通常是一个点的时间），而不同单词之间用长间隔表示（通常是三个点的时间）。这样的间隔用于区分不同的字符和单词。</li><li>编码而非加密：<strong>摩尔斯密码是一种编码而非加密方法，它将字符转换为对应的摩尔斯码。摩尔斯密码是可逆的，也就是说可以根据摩尔斯码还原为原始字符。</strong></li><li>字符集的限制：<strong>摩尔斯密码最初设计用于传输英文字符，因此它的字符集受限于英文字母、数字和一些标点符号。</strong>虽然摩尔斯码可以扩展到其他字符集，但在实际应用中，常见的扩展字符通常使用拼音字母的变体。</li></ol><p>由以上特征可知，摩尔斯密码使用点<code>·</code>和划<code>—</code>组合来表示不同的字符。在此题中，仅仅只是将点<code>·</code>和划<code>—</code>换成了1和0（点<code>.</code>为1，划<code>—</code>为0）,因此我们只需要在线找一个<a href="https://www.lddgo.net/encrypt/morse">摩斯密码翻译器</a>，将题目附件中的内容输入进去并解码，即可得到明文</p><p><img src="/2023/06/18/Adworld-Crypto-1/png3.png" alt="在线摩斯密码翻译器"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MORSECODEISSOINTERESTING</span><br></pre></td></tr></table></figure><p>将解密出来的内容换成小写并放入cyberpeace{}中，即可得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyberpeace&#123;morsecodeissointersting&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第四题：Broadcast-NO-GFSJ0823"><a href="#第四题：Broadcast-NO-GFSJ0823" class="headerlink" title="第四题：Broadcast NO.GFSJ0823"></a>第四题：Broadcast NO.GFSJ0823</h1><p>题目描述：</p><p>粗心的Alice在制作密码的时候，把明文留下来，聪明的你能快速找出来吗？</p><p>题目附件：</p><p><img src="/2023/06/18/Adworld-Crypto-1/png4.png" alt="第四题题目附件"></p><p>给了一堆文件，就想着看看<code>task.py</code>里面有什么，于是打开发现flag就在里面写着</p><p><img src="/2023/06/18/Adworld-Crypto-1/png5.png" alt="task.py文件内容"></p><p>得到flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;fa0f8335-ae80-448e-a329-6fb69048aae4&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上，是笔者在<a href="https://adworld.xctf.org.cn/challenges/list">攻防世界题库</a>中Crypto方向第1至4题的解体思路，希望可以帮助到正在阅读本片文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 攻防世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> base64 </tag>
            
            <tag> Caesar </tag>
            
            <tag> Morse </tag>
            
            <tag> Broadcast </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第二章_第一节</title>
      <link href="/2023/06/11/Note-CPP-2-1/"/>
      <url>/2023/06/11/Note-CPP-2-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-的数据类型"><a href="#C-的数据类型" class="headerlink" title="C++的数据类型"></a>C++的数据类型</h1><p>计算机处理的对象是数据，而数据是以某种特定的形式存在的（例如整数、浮点数、字符等形式）。数据结构指的是数据的组织形式，例如，数组就是一种数据结构。</p><p>C++可以使用的数据类型如下</p><ul><li><p>基本类型</p><ul><li><p>整形</p><ul><li><p>短整型(short int)</p></li><li><p>整形(int)</p></li><li><p>长整型(long int)</p></li></ul></li><li><p>字符型(char)</p></li><li><p>浮点型</p><ul><li><p>单精度型(float)</p></li><li><p>双精度型(double)</p></li><li><p>长双精度型(long doubel)</p></li></ul></li><li><p>布尔型(bool)</p></li></ul></li><li><p>派生类型</p><ul><li><p>指针类型(*)</p></li><li><p>枚举类型(enum)</p></li><li><p>数组类型([ ])</p></li><li><p>结构体类型(struct)</p></li><li><p>共用体类型(union)</p></li><li><p>类类型(class)</p></li></ul></li><li><p>空类型(void)</p></li></ul><p>C++并没有统一规定各类数据的精度、数值范围和在内存中所占的字节数，各种C++编译系统根据自己的情况做出安排。下表列出了Visual C++数值型和字符型数据的情况。</p><h2 id="数值型和字符型数据的字节数，和数值范围"><a href="#数值型和字符型数据的字节数，和数值范围" class="headerlink" title="数值型和字符型数据的字节数，和数值范围"></a>数值型和字符型数据的字节数，和数值范围</h2><table><thead><tr><th align="left">类型</th><th align="left">类型标识符</th><th align="center">字节数</th><th align="left">数值范围</th></tr></thead><tbody><tr><td align="left">整形</td><td align="left">[signed] int</td><td align="center">4</td><td align="left">-2147483648 ~ +2147483648</td></tr><tr><td align="left">无符号整形</td><td align="left">unsigned [int]</td><td align="center">4</td><td align="left">0 ~ 4294967295</td></tr><tr><td align="left">短整形</td><td align="left">short [int]</td><td align="center">2</td><td align="left">-32768 ~ +32767</td></tr><tr><td align="left">无符号短整形</td><td align="left">unsigned short [int]</td><td align="center">2</td><td align="left">0 ~ 65535</td></tr><tr><td align="left">长整型</td><td align="left">long [int]</td><td align="center">4</td><td align="left">-2147483648 ~ +2147483648</td></tr><tr><td align="left">无符号长整形</td><td align="left">unsigned long [int]</td><td align="center">4</td><td align="left">0 ~ 4294967295</td></tr><tr><td align="left">字符型</td><td align="left">[signed] char</td><td align="center">1</td><td align="left">-128 ~ +127</td></tr><tr><td align="left">无符号字符型</td><td align="left">unsigned char</td><td align="center">1</td><td align="left">0 ~ 255</td></tr><tr><td align="left">单精度型</td><td align="left">float</td><td align="center">4</td><td align="left">3.4 x 10^-38 ~ 3.4 x 10^38</td></tr><tr><td align="left">双精度型</td><td align="left">double</td><td align="center">8</td><td align="left">1.7 x 10^-308 ~ 1.7 x 10^308</td></tr><tr><td align="left">长双精度型</td><td align="left">long double</td><td align="center">8</td><td align="left">1.7 x 10^-308 ~ 1.7 x 10^308</td></tr></tbody></table><hr><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><h2 id="什么是常量"><a href="#什么是常量" class="headerlink" title="什么是常量"></a>什么是常量</h2><p>常量的值是不能改变的，一般从其字面形式即可判读其是否为常量。常量包括两大类：<strong>数值型常量</strong>（常数）和<strong>字符型常量</strong>。如70,0,-64为整形常量，6.8,-2.33为实型常量，包含在两个<code>&#39;</code>之间的数为字符常量，如’a’,’b’这种从字面形式即可识别的常量称为<strong>字面常量</strong>或<strong>直接常量</strong>。</p><h2 id="数值常量"><a href="#数值常量" class="headerlink" title="数值常量"></a>数值常量</h2><p>数值常量就是通常所说的<strong>常数</strong>。在C++中，数值常量是区分类型的，从字面意思即可识别其类型。</p><h3 id="整形常量（整数）的类型"><a href="#整形常量（整数）的类型" class="headerlink" title="整形常量（整数）的类型"></a>整形常量（整数）的类型</h3><p>一个常量怎样从字面上区分类型呢</p><ol><li><p>一个整数，若其值在-32768 ~ -32768范围内，那么则认为它是short int型，它可以赋值给short int型，int型和long int型。</p></li><li><p>一个整数，若其值在-2147483648 ~ +2147483648范围内，则认为它是long int型，它可以赋值给int型或long int型。</p></li><li><p>如果某一计算机系统的C++版本确定int与long int型数据在内存中占据的长度相同，则它们能够表示的数值范围相同。若如此，一个int型的常量也同时是一个long int型常量，可以赋值给int型或long int型变量。</p></li><li><p>常量无unsigned型。但是，一个非负值的整数可以赋值给unsigned型变量，只要它的范围不超过变量的取值范围即可。例如，将50000赋给一个unsigned short int 型变量是可以的，但是70000就不行，会溢出。</p></li></ol><p>一个整形常量可以用三种不同的方法表示。</p><ol><li><p>十进制整数。如15674 , -564 , 0等，在一个整常量后面加一个l或L，则认定是long int型常量，例如156l,655L,0L等，这往往用于函数调用中。如果函数的形式参数为long int，则要求实际参数也为long int型，此时用123作实际参数就不行，要用123L才可以。</p></li><li><p>八进制整数。在常数的开头加上一个数字0，就表示这是一个八进制形式表示的常数，如020表示这是八进制数20，相当于十进制数16。</p></li><li><p>十六进制整数。在常数的开头加一个数字0和一个英文字母X或x，就表示这是一个十六进制表示的常数，如0x20表示这是一个十六进制数20，相当于十进制数32。</p></li></ol><h3 id="浮点数的表示方法"><a href="#浮点数的表示方法" class="headerlink" title="浮点数的表示方法"></a>浮点数的表示方法</h3><p>一个浮点数可以用两种不同的方式表示。</p><ol><li><strong>十进制小数形式</strong>。如54.6 , -84.6等。它一般由整数部分和小数部分组成，可以省略其中之一，比如.23 , 54. , .0，但不能二者皆省略。C++编译系统把用这种形式的表示的浮点数一律按双精度常量处理，在内存中占8字节。如果在实数的数字之后加字母F或f，表示此数为长精度数(long double)。</li><li><strong>指数形式</strong>（即浮点形式）。一个浮点数可以写成指数形式，如3.14159可以表示为0.314159 x 10^1 , 3.14159 x 10^0 , 31.4159 x 10 ^-1 , 134.159 x 10^-2等形式。在程序中表示为0.314159e1 , 3.14159e0 , 31.4159e -1 , 314.159e -2 , 用字母e表示其后的数是以10为底的幂，如e12表示10^2。</li></ol><p>其一般形式为</p><p><strong>符号</strong> <strong>数字部分</strong> <strong>指数部分</strong></p><p>上面各数据中的0.314159 ,3.14159,31.4159,134.159等就是其中的数字部分。可以看到，由于指数部分的存在，使得同一个浮点数可用不同的指数形式来表示，数字部分中小数点的位置是浮动的。例如当指数为1时，小数点的位置在数字3前面，指数为0时，小数点的位置在数字3后面。浮点数的名字就源于此。</p><p>在程序中不论把浮点数写成小数形式还是指数形式，在内存中都是以指数形式（即浮点形式）存储的，例如无论在程序中写成134.159或是3.14159e0 , 0.314159e1等形式，在内存中都是以规范化的指数形式存放的，如下表所示：</p><table><thead><tr><th align="center">符号</th><th align="center">数字部分</th><th align="center">指数部分</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">.314159</td><td align="center">3</td></tr></tbody></table><p>数字部分必须小于1，同时，小数点后面第一个数字必须是一个非零数字，例如不能是0.0314159。因此，134.159或是3.14159e0 , 0.314159e1在内存中都表示为0.314159 x 10^3。储存单元分为两部分，一部分用来存放数字部分，另一部分用来存放指数部分。为了便于理解，上表使用十进制来表示的，实际上在存储单元内使用二进制来表示小数部分，用2的幂次来表示指数部分的。</p><p>对于以指数新式表示的数值常量，也都作为双精度常量处理。</p><h2 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h2><h3 id="普通的字符常量"><a href="#普通的字符常量" class="headerlink" title="普通的字符常量"></a>普通的字符常量</h3><p>用<code>&#39;</code>括起来的一个字符就是字符常量。如’a’ , ‘#’ , ‘@’ , ‘W’这些都是合法的字符常量，在内存中占一个字节。注意：</p><ol><li><p>字符常量只包括一个字符，比如’SH’就是不合法的。</p></li><li><p>字符常量是区分大小写的，比如’C’ , ‘c’两个字符常量是不一样的。</p></li><li><p><code>&#39;</code>是定界符，被<code>&#39;</code>包裹的内容是字符常量，<code>&#39;</code>并不属于字符常量的一部分。比如：</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout &lt;&lt; <span class="string">&#x27;c&#x27;</span>;</span><br></pre></td></tr></table></figure><p>输出的是一个字母“c”，并不是三个字符<code>&#39;c&#39;</code>。</p><h3 id="转义字符常量"><a href="#转义字符常量" class="headerlink" title="转义字符常量"></a>转义字符常量</h3><p>除了上面那种字符常量以外，C++还允许用一种特殊的形式的字符常量，就是以<code>\</code>开头的一些字符，比如<code>\n</code>就代表一个换行符。<code>cout &lt;&lt; &#39;\n&#39;;</code>会输出一个换行，作用与<code>cout &lt;&lt; endl;</code>相同。这种字符在屏幕上是不显示的，它们只管执行自己相应的操作，并且在程序中也不能一般的字符表示，只能用这种<code>\</code>开头的特殊字符来表示。</p><p>以下为常用的以<code>\</code>开头的特殊字符</p><table><thead><tr><th align="center">字符形式</th><th align="center">含义</th><th align="center">ASCII代码</th></tr></thead><tbody><tr><td align="center">\a</td><td align="center">响铃</td><td align="center">7</td></tr><tr><td align="center">\n</td><td align="center">换行，将当前位置移到下一行开头</td><td align="center">10</td></tr><tr><td align="center">\t</td><td align="center">水平制表（跳到下一个tab位置）</td><td align="center">9</td></tr><tr><td align="center">\b</td><td align="center">退格，将当前位置移到前一列</td><td align="center">8</td></tr><tr><td align="center">\r</td><td align="center">回车，将当前位置移到本行开头</td><td align="center">13</td></tr><tr><td align="center">\f</td><td align="center">换页，将当前位置移到下一页开头</td><td align="center">12</td></tr><tr><td align="center">\v</td><td align="center">竖向跳格</td><td align="center">8</td></tr><tr><td align="center">\\</td><td align="center">反斜杠字符<code>\</code></td><td align="center">92</td></tr><tr><td align="center">&#39;</td><td align="center">单引号<code>&#39;</code>字符</td><td align="center">39</td></tr><tr><td align="center">&quot;</td><td align="center">双引号<code>”</code>字符</td><td align="center">34</td></tr><tr><td align="center">\0</td><td align="center">空字符</td><td align="center">0</td></tr><tr><td align="center">\ddd</td><td align="center">1~3为八进制数所代表的字符</td><td align="center">无</td></tr><tr><td align="center">\xhh</td><td align="center">1~2位十进制数所代表的字符</td><td align="center">无</td></tr></tbody></table><p>上表中列出的字符称为“转义字符”，意思是将<code>\</code>后的字符转换成另外一种意义的字符。如<code>\n</code>中的<code>n</code>不是代表字母n而是作为”换行“符。</p><p>上表中最后两行是用八进制数的ASCII码表示一个字符，例如<code>\101</code>代表以八进制数形式ASCII码101代表的字符，而8进制101就是十进制数65。<code>\012</code>代表八进制数012表示的ASCII字符，它相当于以十进制10表示的ASCII字符，用’376’代表图形字符“■”。用上表中的方法可以表示任何可输出的字母字符、专用字符、图形字符和控制字符。请注意<code>\0</code>或<code>\1000</code>是代表ASCII码为0的控制字符，即“空操作”字符，它广泛用于字符串中。转义字符虽然包含两个或多个字符，但它只代表一个字符。编译系统在见到字符“\”时，会接着找它后面的字符，把它处理成一个字符，在内存中只占一个字节。</p><h3 id="字符数据在内存中的存储形式及其使用方法"><a href="#字符数据在内存中的存储形式及其使用方法" class="headerlink" title="字符数据在内存中的存储形式及其使用方法"></a>字符数据在内存中的存储形式及其使用方法</h3><p>将一个字符常量存放到内存单元时,实际上并不是把该字符本身放到内存单元中去，而是将该字符相应的ASCHI代码放到存储单元中。如果字符变量c1的值为’a’，c2的值为’b’，则在变量中存放的是’a’ 的ASCII码97，’b’的ASCII码98,实际上在内存中是以二进制形式存放的。既然字符数据以ASCII码存储的,它的存储形式就与整数的存储形式类似。这样，在C ++中字符型数据和整型数据之间就可以通用。一个字符数据可以赋给一个整型变量，反之，一个整型数据也可以赋给一个字符变量。也可以对字符数据进行算术运算，此时相当于对它们的ASCII码进行算术运算。</p><h4 id="例：将字符赋给整形变量。"><a href="#例：将字符赋给整形变量。" class="headerlink" title="例：将字符赋给整形变量。"></a>例：将字符赋给整形变量。</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;                  <span class="comment">//i和j是整型变量</span></span><br><span class="line">    i = <span class="string">&#x27;A&#x27;</span>;                  <span class="comment">//将一个字符常量赋给整型变量i</span></span><br><span class="line">    j = <span class="string">&#x27;B&#x27;</span>;                  <span class="comment">//将一个字符常量赋给整型变量j</span></span><br><span class="line">    cout &lt;&lt; i &lt;&lt; <span class="string">&#x27;&#x27; &lt;&lt; j &lt;&lt; &#x27;</span>\n<span class="number">&#x27;</span>;     <span class="comment">//输出整型变量i和j的值,&#x27;\n&#x27;是换行符</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p>65 66</p><p>分析：</p><p>i 和 j 被指定为整型变量。但在第5行和第6行中,将字符’A’和’B’分别赋给 i 和 j ,它的作用相当于以下两个赋值语句:<br>i&#x3D;65;j &#x3D;66;<br>因为’A’和’B’的ASCII码为65和66。在程序的第5行和第6行是把65和66直接存放到 i 和 j 的内存单元中。因此输出65和66。</p><p>可以看到,在一定条件下,字符型数据和整型数据是可以通用的。但是应注意字符数据只占一个字节,它只能存放0 ~ 255范围内的整数。</p><h4 id="例：字符数据与整数进行算术运算，实现小写字母转换为大写字母。"><a href="#例：字符数据与整数进行算术运算，实现小写字母转换为大写字母。" class="headerlink" title="例：字符数据与整数进行算术运算，实现小写字母转换为大写字母。"></a>例：字符数据与整数进行算术运算，实现小写字母转换为大写字母。</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt; iostream &gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> cl ,c2;</span><br><span class="line">    cl = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    c2 = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    cl = cl<span class="number">-32</span>;</span><br><span class="line">    c2 = c2<span class="number">-32</span>;</span><br><span class="line">    cout &lt;&lt; c1 &lt;&lt; <span class="string">&#x27;&#x27; &lt;&lt; c2 &lt;&lt; endl;</span></span><br><span class="line"><span class="string">    return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p>A B</p><p>分析：</p><p>‘a’的ASCII码为97,而’A的ASCII码为65 , ‘b’为98, ‘B’为66。从ASCII代码表中可以看到每一个小写字母比它相应的大写字母的ASCI代码大32。C++字符数据与数值直接进行算术运算，’a’-32得到整数65，’b’-32得到整数66。将65和66存放在cl，c2中，由于cl,c2是字符变量,因此用cout输出cl，c2时，得到字符’A’和’B’(‘A’的ASCII码为65，’B’的ASCII码为66)。</p><h3 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h3><p>用双撇号括起来的字符就是字符串常量,如,” abc” ，”Hello!” ，”a+b” ，”Li- ping”都是字符串常量。字符串常量”abc”在内存中占4个字节(而不是3个字节)，见图2.5。编译系统会在字符串最后自动加一个’\0’作为字符串结束标志。但’\0’并不是字符串的一部分，它只作为字符串的结束标志。如</p><table><thead><tr><th align="center">a</th><th align="center">b</th><th align="center">c</th><th align="center">\0</th></tr></thead><tbody><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cout&lt;&lt;<span class="string">&quot;abc&quot;</span>&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>输出三个字符abc，不包括’\0’。</p><p>注意: “a”和’a’代表不同的含义，”a”是字符串常量，’a’是字符常量。前者占两个字节，后者占1个字节。请分析下面的程序片段:<br>char c;        &#x2F;&#x2F;定义一个字符变量<br>c&#x3D;’a’;           &#x2F;&#x2F;正确<br>c&#x3D;”a”;          &#x2F;&#x2F;错误,c只能容纳一个字符<br>字符串常量要用字符数组来存放。<br>请思考:字符串常量” abc\n”包含几个字符?不是5个而是4个字符,其中“\n”是一个转义字符。但它在内存中占5个字节(包括一个“\0”字符)。编译系统遇到“\”时就会把它认作转义字符的标志，把它和其后的字符一起作为一个转义字符。如果“\” 后面的字符不能与“\”组成一个合法的转义字符(如” \c” ),则在编译时显示出错信息。如果希望将“\”字符也作为字符串中的一个字，则应写为</p><blockquote><p>“ abc\\n” </p></blockquote><p>此时字符包括5个字符：a，b，c，\，n。</p><h2 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h2><p>为了编程和阅读的方便，可以用一个符号名代表一个常量，称为<strong>符号常量</strong>，即以标识符形式出现的常量。</p><h3 id="例：计算货款，使用符号常量。"><a href="#例：计算货款，使用符号常量。" class="headerlink" title="例：计算货款，使用符号常量。"></a>例：计算货款，使用符号常量。</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std ;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRICE 30                         <span class="comment">//注意这不是语句,末尾不要加分号</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span> <span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num,total;                       <span class="comment">// num代表购货数量, total代表总货款</span></span><br><span class="line">    num = <span class="number">10</span>;</span><br><span class="line">    total = num * PRICE;                 <span class="comment">//PRICE 是符号常量,代表30(单价)</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;total=&quot;</span> &lt;&lt; total &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  结果：</p><p>total&#x3D;300</p><p>分析：</p><p>程序中用预处理指令#define指定PRICE在本程序单位中代表常量30。请注意符号常量虽然有名字，但它不是变量。在进行编译预处理时，所有的PRICE都被置换为字符30，在正式进行编译时已经没有PRICE这个标识符了。显然，符号常量不能被赋值。如用赋值语句<code>PRICE =40;</code>给PRICE赋值是错误的。使用符号常量的好处是：</p><p>(1)含义清楚。在一个规范的程序中不提倡使用很多的直接常量,如sum&#x3D;15*30*23.5*43。应尽量使用“见名知意”的变量名和符号常量。<br>(2)在需要改变一个常量时能做到“一改全改”。例如在程序中多处用到某物品的价格,如果价格用常数表示，则在价格调整时,就需要在程序中作多处修改,若用符号常量PRICE代表价格,只须改动第一行即可。如</p><blockquote><p>#define PRICE 35</p></blockquote><p>在程序中所有以PRICE代表的价格就会一律 自动改为35。<br>符号常量在C程序中用得较多，在C++程序中常用常变量，而较少用符号常量。</p><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>至此，这章巨多内容的第一节终于整理完毕，内容多数来自《C++程序设计（第三版）》中的第二章内容，希望可以帮助到正在阅读本片文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第一章</title>
      <link href="/2023/06/08/Note-CPP-1/"/>
      <url>/2023/06/08/Note-CPP-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="最简单的C-程序"><a href="#最简单的C-程序" class="headerlink" title="最简单的C++程序"></a>最简单的C++程序</h1><h2 id="例1-1：输出一行字符"><a href="#例1-1：输出一行字符" class="headerlink" title="例1.1：输出一行字符"></a>例1.1：输出一行字符</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>        <span class="comment">//包含头文件 iostream</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;       <span class="comment">//使用C++的命名空间std</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;this is a C++ program.&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong> this is a C++ program.</p><p><strong>分析：</strong></p><p>先看程序第三行，其中用<code>main</code>代表”主函数”的名字。每一个C++程序都必须有一个<code>main</code>主函数。<code>main</code>前面的<code>int</code>的作用是声明函数的数据类型为<strong>整形</strong>（标准C++规定main函数的数据类型必须为整形<code>int</code>）程序第六行的作用是向操作系统返回一个0值来表示程序执行成功，如果程序执行不成功，则会自动向操作系统返回一个非零值，一般为-1.</p><p>函数体是由大括号<code>&#123;&#125;</code>括起来的，例1.1中主函数内有一个以<code>cout</code>开头的语句。<code>cout</code>是由c和out两个单词组成，顾名思义，它是C++中用于输出的语句，我们可以把<code>cout</code>和<code>&lt;&lt;</code>组成的语句简称为cout语句，<code>&lt;&lt;</code>是插入运算符，与<code>cout</code>配合使用，在例1.1中它的作用是把它右侧的字符串插入到C++的输出队列cout中（输出队列也称输出流），C++系统将输出流cout的内容输出到系统指定的设备（一般为显示器）中，<strong>注意，C++所有语句最后都应当有一个分号<code>;</code></strong></p><p>此程序的第一行<code>#include &lt;iostream&gt;</code>，属于C++的预处理指令，它以<code>#</code>开头，与C++的语句相区别，行末没有分号，<code>#include &lt;iostream&gt;</code>是一个包含指令，作用是将文件 iostream 的内容包含到该指令所在的程序文件中，代替该指令。文件 iostream 的作用是向程序提供输入或输出是所需要的一些信息。 iostream 是由i-o-stream三个词组成，代表输入输出流的意思，由于这类文件通常放在程序单元的开头，所以称为”<strong>头文件</strong>“（header file）。在程序进行编译时，先对所有预处理命令进行处理，将头文件的具体内容代替<code>#include</code>指令，然后再对整个程序单元进行编译。</p><p>此程序的第二行<code>using namespace std;</code>的意思是”使用命名空间std“。C++标准库中的类和函数是在命名空间std中声明的，因此程序中如果需要用到C++标准库（此时需要用<code>#include</code>指令）,就需要用<code>using namespace std;</code>做声明，表示用到命名空间std中的内容。</p><p>作为C++初学者，例如本程序头部前两行不必深究，只需要知道，如果有程序有输入或输出时，必须使用<code>#include&lt;iostream&gt;</code>来提供必要的信息，同时也要使用<code>using namespace std;</code>使程序能够使用这些信息，否则程序编译时将出错。请读者在在联系写C++程序是也在程序中包含此两行。</p><h2 id="例1-2：求a，b之和"><a href="#例1-2：求a，b之和" class="headerlink" title="例1.2：求a，b之和"></a>例1.2：求a，b之和</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>           <span class="comment">//预处理指令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;          <span class="comment">//使用命名空间std</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>                    <span class="comment">//声明主函数main</span></span></span><br><span class="line"><span class="function"></span>&#123;                             <span class="comment">//函数主体开始</span></span><br><span class="line">    <span class="type">int</span> a,b,sum;              <span class="comment">//声明变量</span></span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;                <span class="comment">//输入变量a，b的值</span></span><br><span class="line">    sum=a+b;                  <span class="comment">//赋值语句</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a+b=&quot;</span>&lt;&lt;sum&lt;&lt;endl;  <span class="comment">//输出语句</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                 <span class="comment">//若程序正常结束，则返回0</span></span><br><span class="line">&#125;                             <span class="comment">//函数结束</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>本程序的作用是求两个整数a和b之和sum。程序中所有的<code>//</code>后面的内容都为注释，从它开始到本行末尾都为注释内容，<strong>注释是写给人看的而非机器</strong>，在程序编译时会忽略这些内容，注释可以加在程序中任何行的右侧，为便于程序的读者甚至是自己理解，常会在程序中添加许多注释来提高程序的可读性，在有的程序中，注释行可能占据篇幅的三分之一。</p><p>第五行是声明，定义变量a，b，sum为整形（int）变量。第六行是输入语句<code>cin</code>，<code>cin</code>是c和in两单词的结合，与<code>cout</code>类似，<code>cin</code>是C++系统定义的<strong>输入流对象</strong>。<code>&gt;&gt;</code>是“提取运算符”，与<code>cin</code>配合使用，其作用是从输入设备（如键盘）提取数据送到输入流<code>cin</code>中。我们可以把<code>cin</code>和<code>&gt;&gt;</code>组成的语句简称为cin语句。程序第七行在执行程序中的cin语句时，从键盘输入的第一个值赋给变量a，输入的第二个值赋给变量b，第七行将a+b的值赋给变量sum，第八行先输出字符串“a+b&#x3D;”，然后输出变量sum的值。<code>cout</code>语句中的<code>endl</code>（end line）是C++输出时的控制符，作用是换行。因此在输出变量sum的值之后换行。</p><p><strong>运行结果：</strong></p><p>在运行中从键盘输入以下信息（输入信息都为斜体表示以为区分输入和输出）</p><p><em>123 456</em></p><p>则输出为</p><p>a+b&#x3D;579</p><h2 id="例1-3：给两个数x和y，求两个数中的大者"><a href="#例1-3：给两个数x和y，求两个数中的大者" class="headerlink" title="例1.3：给两个数x和y，求两个数中的大者"></a>例1.3：给两个数x和y，求两个数中的大者</h2><p>本例中包含两个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>        <span class="comment">//预处理指令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>       <span class="comment">//定义max函数，函数值为整形，形式参数x，y为整形</span></span></span><br><span class="line"><span class="function"></span>&#123;                          <span class="comment">//max函数开始</span></span><br><span class="line">    <span class="type">int</span> z                  <span class="comment">//声明变量z为整形</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) z = x;       <span class="comment">//if语句，如果x大于y，则将x的值赋给z</span></span><br><span class="line">        <span class="keyword">else</span> z = y;        <span class="comment">//否则，将y的值赋给z</span></span><br><span class="line">    <span class="keyword">return</span>(z);             <span class="comment">//将z的值返回，通过max带回调用处</span></span><br><span class="line">&#125;                          <span class="comment">//本函数结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>                 <span class="comment">//声明主函数main</span></span></span><br><span class="line"><span class="function"></span>&#123;                          <span class="comment">//主函数开始</span></span><br><span class="line">    <span class="type">int</span> a,b,m;             <span class="comment">//声明变量</span></span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;             <span class="comment">//输入变量a，b的值</span></span><br><span class="line">    m = <span class="built_in">max</span>(a,b);          <span class="comment">//调用max函数，将得到的值赋给m</span></span><br><span class="line">    cout&lt;&lt;”max”&lt;&lt;m&lt;&lt;<span class="string">&#x27;\n&#x27;</span>   <span class="comment">//输出大于m的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;              <span class="comment">//若程序正常，则返回0</span></span><br><span class="line">&#125;                          <span class="comment">//主函数结束</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>本程序包含两个函数：主函数main和被调用的函数max。程序中第3-9行是max函数，他的作用是将x和y中较大者的值赋给变量z，<code>return</code>语句将z值返回给主函数main。返回值通过函数名max带回到main函数的调用处。主函数中<code>cin</code>语句的作用是输入a，b的值。mian函数中第5行为调用max函数，在调用时将实际参数a和b的值分别传送给max函数中的形式参数x和y。经过执行max函数得到一个返回值（即max函数中变量z的值），把这个值赋给变量m。然后通过<code>cuot</code>语句输出m的值</p><p><strong>运行结果：</strong></p><p><em>18 25</em></p><p>max&#x3D;25</p><p><strong>注意：</strong> 输入的两个数据之间用一个或多个空格间隔，不能以逗号或其他符号间隔，如输入</p><p><em>18， 25</em></p><p>或者</p><p><em>18；25</em></p><p>都是错误的，他不能正确输入第二个变量的值，使第二个变量有不可预见的值。</p><p>在上面的程序中，max函数出现在main函数之前，因此在main函数中调用max函数时，编译系统能识别max是已定义的函数名。若把两个函数的顺序调换，编译系统无法知道max函数是什么，因此按出错处理。</p><p>为了解决这个问题，在main函数中需要对被调用的函数做出声明，对上面的程序进行改写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;       <span class="comment">//预处理指令</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>                 <span class="comment">//声明主函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>;  <span class="comment">//对max函数进行声明</span></span><br><span class="line">    <span class="type">int</span> a,b,m;             <span class="comment">//声明变量</span></span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;             <span class="comment">//输入变量a，b的值</span></span><br><span class="line">    m = <span class="built_in">max</span>(a,b);          <span class="comment">//调用max函数，将得到的值赋给m</span></span><br><span class="line">    cout&lt;&lt;”max”&lt;&lt;m&lt;&lt;<span class="string">&#x27;\n&#x27;</span>   <span class="comment">//输出大于m的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;              <span class="comment">//若程序正常，则返回0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>       <span class="comment">//定义max函数，函数值为整形，形式参数x，y为整形</span></span></span><br><span class="line"><span class="function"></span>&#123;                          <span class="comment">//max函数开始</span></span><br><span class="line">    <span class="type">int</span> z                  <span class="comment">//声明变量z为整形</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) z = x;       <span class="comment">//if语句，如果x大于y，则将x的值赋给z</span></span><br><span class="line">        <span class="keyword">else</span> z = y;        <span class="comment">//否则，将y的值赋给z</span></span><br><span class="line">    <span class="keyword">return</span>(z);             <span class="comment">//将z的值返回，通过max带回调用处</span></span><br><span class="line">&#125;                          <span class="comment">//本函数结束</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>程序第5行是对max函数进行声明，是为了让C++编译系统知道：max是一个函数，函数值是整形，函数有两个参数，都是整形。这样，在编译到第8行时，编译系统会知道max是已声明的函数，系统会系统就会根据函数声明时给定的信息对函数调用的合法性进行检查，如果二者不匹配（例如参数的个数或参数的类型与声明时所指定的不符），编译就会出错。</p><hr><h1 id="C-程序的构成和书写形式"><a href="#C-程序的构成和书写形式" class="headerlink" title="C++程序的构成和书写形式"></a>C++程序的构成和书写形式</h1><p>从上面几个例子中已经基本可以看出C++程序的结构和书写结构，现在归纳如下：</p><ol><li><p>一个C++程序可以由一个程序单位或多个程序单位构成。每一个程序单位作为一个文件。在程序编译时，编译系统分别对各个文件进行编译因此一个文件是一个编译单位</p></li><li><p>在一个程序中，可以包括以下三个部分:</p><ol><li><p><strong>预处理指令：</strong> #include指令</p></li><li><p><strong>全局声明部分：</strong> 在这部分中包括对用户自己定义的数据类型的声明和程序中所用到的变量的定义</p></li><li><p><strong>函数：</strong> 函数是实现操作的部分，因此函数是程序中最基础也是必须有的部分，每个人程序可以有一个或者多个函数，但是只能并必须有一个main函数</p></li></ol></li><li><p>一个函数由两部分组成</p><ol><li><p><strong>函数首部：</strong> 也就是函数的第一行、包括函数名、函数类型、函数属性、函数参数（形参）名、参数类型</p><p>例如例1.3中的max函数首部为</p><table><thead><tr><th align="center">int</th><th align="center">max</th><th align="center">(int</th><th align="center">x</th><th align="center">,</th><th align="center">int</th><th align="center">y)</th></tr></thead><tbody><tr><td align="center">函数类型</td><td align="center">函数名</td><td align="center">函数参数类型</td><td align="center">函数参数名</td><td align="center">,</td><td align="center">函数参数类型</td><td align="center">函数参数名</td></tr></tbody></table><p>一个函数名后面必须有一对括号，函数的参数可以缺省，如int main()</p></li><li><p><strong>函数体：</strong> 即函数首部下面大括号中的内容，如果一个函数中有多个大括号，最外层的一对{}是函数体的范围</p></li></ol></li></ol><p>              函数体一般包括：</p><p>              <strong>·   局部声明部分：</strong> </p><blockquote><p>包括对本函数中所有用到的类型、函数的声明及变量的定义。如例1.3中的<code>int a,b,m;</code>以及对所调用的函数声明<code>int max(int x,int y);</code></p></blockquote><blockquote><p>对数据的声明既可以放在函数之外，作用在全局。也可以放在函数内，作用在函数内。</p></blockquote><p>             <strong>·   执行部分：</strong></p><blockquote><p>由若干个执行语句组成，用来进行有关的操作，以实现函数的功能。</p><p>当然，在有的时候可以没有声明部分，也可以没有执行部分，例如</p><p>int a ( ) { }</p><p>是一个空函数，什么也不做，也是合法的</p></blockquote><ol start="4"><li><p>语句包括两类。一类是<strong>声明语句</strong>，如<code>int a,b</code> ，用来向编译系统通知某些信息，比如类型、函数、和变量的声明或定义，但是不起任何实际的作用，是<strong>非执行语句</strong>。另一类是<strong>执行语句，用来实现用户指定的操作</strong>，C++对每一种语句赋予一种特定的功能。语句是实现操作的基本操作，显然，没有语句的函数是没有意义的。C++语句必须以分号<code>;</code>结尾,如<code>a+b=c;</code>分号是语句的一个组成部分，没有分号就不是语句。</p></li><li><p><strong>一个C++程序总是从main函数开始执行</strong>，不论main函数在什么地方。</p></li><li><p><strong>类（class）是C++新增加的重要的数据类型</strong>，是C++对C的最重要发展。有了类，就可以实现变相对象程序设计方法中的封装、信息隐蔽、继承、派生、多态等功能。在一个类中可以包括数据成员，和成员函数，它们可以被指定为私有（private）或者公共（public）属性，私有的数据成员和成员函数只能被本类的成员函数所调用。</p></li><li><p>C++一行内可以书写多个语句，一个语句也可以写在多行上，一般情况下提倡一句一行，可以使程序清晰、有序</p></li><li><p>一个好的程序应有适当的注释，注释分两种：行内注释和跨行注释，行内注释只需使用<code>//</code>即可，<code>//</code>后的内容皆为注释，跨行注释语法格式为</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要注释的内容</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>此语法格式沿用于C，在C++中同样适用。</p><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上，是笔者整理的自我认为本章内重要的内容，内容多数来自《C++程序设计（第三版）》中的第一章内容，希望可以帮助到正在阅读本片文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础学习笔记（暂缓）</title>
      <link href="/2023/06/06/network-foundation/"/>
      <url>/2023/06/06/network-foundation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> 报文 </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法熟悉，总结及测试</title>
      <link href="/2023/06/02/markdown-grammar/"/>
      <url>/2023/06/02/markdown-grammar/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown-标题语法"><a href="#Markdown-标题语法" class="headerlink" title="Markdown 标题语法"></a>Markdown 标题语法</h1><p>若要创建标题,可以在标题内容前面添加 <code>#</code> , <code>#</code> 的数量多少表示这是几级标题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如:</span><br><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure><p>注意:为了稳定,需要在代表标题等级的 <strong>#</strong> 符号后表述完成后,与你的标题正文中使用空格来进程分隔</p><h2 id="如何避免转义"><a href="#如何避免转义" class="headerlink" title="如何避免转义"></a>如何避免转义</h2><p>在需要避免转义的语法前添加 <code>\</code> 即可</p><hr><h1 id="Markdown-段落语法"><a href="#Markdown-段落语法" class="headerlink" title="Markdown 段落语法"></a>Markdown 段落语法</h1><p>若想新建一个段落,可以使用Enter键换一行或多行来实现,并且多行只会被识别成一行。若想换多行,请见下一节</p><hr><h1 id="Markdown-换行语法"><a href="#Markdown-换行语法" class="headerlink" title="Markdown 换行语法"></a>Markdown 换行语法</h1><p>若想在Markdown中换一行,可以在行末添加两个以上空格然后再按Enter键(不推荐),或者直接按Enter键(推荐)。</p><h2 id="多次换行"><a href="#多次换行" class="headerlink" title="多次换行"></a>多次换行</h2><p>若想一次性进行多次换行,可以在行末添加<code>&lt;br&gt;</code></p><hr><h1 id="Markdown-强调语法"><a href="#Markdown-强调语法" class="headerlink" title="Markdown 强调语法"></a>Markdown 强调语法</h1><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><p>若要加粗文本可以在需要加粗的文本前后各添加两个 <code>*</code> 或 <code>_</code> 来实现文本 <strong>加粗</strong></p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>若要斜体显示文本,可以在要斜体显示的文本前后各添加一个 <code>*</code> 或 <code>_</code> 来实现文本 <em>斜体</em></p><h2 id="粗体并斜体"><a href="#粗体并斜体" class="headerlink" title="粗体并斜体"></a>粗体并斜体</h2><p>若要使文本加粗并斜体显示,可以在要实现此效果的文本前后添加三个 <code>*</code> 或 <code>_</code> 来实现文本 <em><strong>加粗并斜体</strong></em></p><hr><h1 id="Markdown-引用语法"><a href="#Markdown-引用语法" class="headerlink" title="Markdown 引用语法"></a>Markdown 引用语法</h1><p>要创建块引用，可以在要引用的文本前加一个 <code>&gt;</code> 符号</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;引用内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是一些引用内容</p></blockquote><h2 id="多个段落的块引用"><a href="#多个段落的块引用" class="headerlink" title="多个段落的块引用"></a>多个段落的块引用</h2><p>块引用可以包含多个段落。为段落之间的空白行添加 <code>&gt;</code> 即可</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;多个段落的引用</span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;多个段落的引用</span></span><br></pre></td></tr></table></figure><p>效果如下</p><blockquote><p>这是一些引用内容</p><p>这是一些引用内容</p></blockquote><h2 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;some thing</span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;&gt;some thing</span></span><br></pre></td></tr></table></figure><p>效果如下</p><blockquote><p>some thing</p><blockquote><p>some thing</p></blockquote></blockquote><h2 id="带有其他元素的块引用"><a href="#带有其他元素的块引用" class="headerlink" title="带有其他元素的块引用"></a>带有其他元素的块引用</h2><p>块引用可以包含其他 Markdown 格式的元素。但是并非所有元素都可以引用，需要自行实践。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; #### The quarterly results look great!</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; - Revenue was off the chart.</span></span><br><span class="line"><span class="quote">&gt; - Profits were higher than ever.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;  <span class="emphasis">*Everything*</span> is going according to <span class="strong">**plan**</span>.</span></span><br></pre></td></tr></table></figure><p>效果如下</p><blockquote><h4 id="The-quarterly-results-look-great"><a href="#The-quarterly-results-look-great" class="headerlink" title="The quarterly results look great!"></a>The quarterly results look great!</h4><ul><li><p>Revenue was off the chart.</p></li><li><p>Profits were higher than ever.</p><p><em>Everything</em> is going according to <strong>plan</strong>.</p></li></ul></blockquote><hr><h1 id="Markdown-列表语法"><a href="#Markdown-列表语法" class="headerlink" title="Markdown 列表语法"></a>Markdown 列表语法</h1><p>可以将多个条目组织成或有序列表。</p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>若要创建有序列表，可以在每一个列表项前添加数字并紧跟一个英文句点 <code>.</code> ，数字可以不用按顺序排列，但是推荐以1进行起始</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> text</span><br><span class="line"><span class="bullet">2.</span> text</span><br><span class="line"><span class="bullet">3.</span> text</span><br></pre></td></tr></table></figure><p>或者不按顺序</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> text</span><br><span class="line"><span class="bullet">1.</span> text</span><br><span class="line"><span class="bullet">1.</span> text</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> text</span><br><span class="line"><span class="bullet">9.</span> text</span><br><span class="line"><span class="bullet">5.</span> text</span><br></pre></td></tr></table></figure><p>效果如下</p><ol><li>text</li><li>text</li><li>text</li></ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>若要创建无序列表，可以在每一个列表项前面添加 <code>-</code> 或者 <code>*</code> 或者 <code>+</code> ，缩进列表项可以创建嵌套列表</p><h3 id="以"><a href="#以" class="headerlink" title="以 -"></a>以 <code>-</code></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> text</span><br><span class="line"><span class="bullet">-</span> text</span><br><span class="line"><span class="bullet">-</span> text</span><br></pre></td></tr></table></figure><h3 id="以-1"><a href="#以-1" class="headerlink" title="以 *"></a>以 <code>*</code></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> text</span><br><span class="line"><span class="bullet">*</span> text</span><br><span class="line"><span class="bullet">*</span> text</span><br></pre></td></tr></table></figure><h3 id="以-2"><a href="#以-2" class="headerlink" title="以 +"></a>以 <code>+</code></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> text</span><br><span class="line"><span class="bullet">+</span> text</span><br><span class="line"><span class="bullet">+</span> text</span><br></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> text</span><br><span class="line"><span class="bullet">-</span> text</span><br><span class="line"><span class="bullet">    -</span> text</span><br><span class="line"><span class="bullet">    -</span> text</span><br><span class="line"><span class="bullet">-</span> text</span><br></pre></td></tr></table></figure><p>效果如下</p><p>常规</p><ul><li>text</li><li>text</li><li>text</li></ul><p>嵌套</p><ul><li>text</li><li>text<ul><li>text</li><li>text</li></ul></li><li>text</li></ul><h2 id="在列表中嵌套其他元素"><a href="#在列表中嵌套其他元素" class="headerlink" title="在列表中嵌套其他元素"></a>在列表中嵌套其他元素</h2><p>若要在保留列表的结构的前提下在列表中添加另一种元素，请将该元素缩进四个空格或者一个制表符，如下列所示</p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> text</span><br><span class="line"><span class="bullet">*</span> text</span><br><span class="line"></span><br><span class="line"><span class="code">    another text</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> text</span><br></pre></td></tr></table></figure><p>效果如下</p><ul><li><p>text</p></li><li><p>text</p><p>another text</p></li><li><p>text</p></li></ul><h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 一些无序列表项</span><br><span class="line"><span class="bullet">*</span> 另一些无序列表项</span><br><span class="line"></span><br><span class="line"><span class="code">    &gt;另外一些块项目</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 无序列表项</span><br></pre></td></tr></table></figure><p>效果如下</p><ul><li><p>一些无序列表项</p></li><li><p>另一些无序列表项</p><blockquote><p>另外一些块项目</p></blockquote></li><li><p>无序列表项</p></li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块通常采用四个空格或者一个制表符来缩进，当这些代码块在列表中时，你需要将他们缩进八个空格或者两个制表符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 一些代码</span><br><span class="line"><span class="bullet">2.</span> 一些东西</span><br><span class="line"><span class="code">        &lt;html&gt;</span></span><br><span class="line"><span class="code">          &lt;head&gt;</span></span><br><span class="line"><span class="code">            &lt;title&gt;TEST&lt;/title&gt;</span></span><br><span class="line"><span class="code">          &lt;/head&gt; </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> balabala</span><br></pre></td></tr></table></figure><p>效果如下</p><ol><li><p>一些代码</p></li><li><p>一些东西</p><pre><code>&lt;html&gt;  &lt;head&gt;    &lt;title&gt;TEST&lt;/title&gt;  &lt;/head&gt; </code></pre></li><li><p>balabala……..</p></li></ol><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片在被放在列表中也请使用一个制表符或四个空格来缩进</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 巴拉巴拉</span><br><span class="line"><span class="bullet">2.</span> 巴拉巴拉</span><br><span class="line"><span class="code">    ![someinmage](png1.png &quot;一张图片&quot;)</span></span><br><span class="line"><span class="code">3. 巴拉巴拉    </span></span><br></pre></td></tr></table></figure><p>效果如下</p><ol><li>一些内容</li><li>一些内容<br><img src="/2023/06/02/markdown-grammar/png1.png" alt="someinmage" title="一张图片"></li><li>一些内容</li></ol><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>你可以在一个有序列表中放入一个无序列表，也请使用一个制表符或者四个空格来缩进</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> First item</span><br><span class="line"><span class="bullet">2.</span> Second item</span><br><span class="line"><span class="bullet">3.</span> Third item</span><br><span class="line"><span class="bullet">    -</span> Indented item</span><br><span class="line"><span class="bullet">    -</span> Indented item</span><br><span class="line"><span class="bullet">4.</span> Fourth item</span><br></pre></td></tr></table></figure><p>效果如下</p><ol><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Fourth item</li></ol><hr><h1 id="Markdown-代码语法"><a href="#Markdown-代码语法" class="headerlink" title="Markdown 代码语法"></a>Markdown 代码语法</h1><p>若要将一段单词或短语表示为代码，请在要标记的单词前后各加一个 &#96;&#96; &#96; </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一些文本和一些<span class="code">`代码`</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p>一些文本和一些<code>代码</code></p><h3 id="转义反引号（-96-）"><a href="#转义反引号（-96-）" class="headerlink" title="转义反引号（&#96;）"></a>转义反引号（&#96;）</h3><p>若代码中也有反引号，可以代码包裹在 &#96;&#96;&#96; &#96; 中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">``代码中包括`</span>反引号<span class="code">`的部分`</span>`</span><br></pre></td></tr></table></figure><p>效果如下</p><p><code>代码中包括`反引号`的部分</code></p><h3 id="代码块-1"><a href="#代码块-1" class="headerlink" title="代码块"></a>代码块</h3><p>若要创建代码块，请将代码块中的代码每一行后缩进四个空格或者一个制表符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下</p><pre><code>&lt;html&gt;  &lt;head&gt;  &lt;/head&gt;&lt;/html&gt;</code></pre><h3 id="围栏式代码块"><a href="#围栏式代码块" class="headerlink" title="围栏式代码块"></a>围栏式代码块</h3><p>若要创建不缩进的代码块，请在代码块的开头及末尾的单独一行使用 &#96;&#96;&#96;&#96; &#96;</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>一些代码<br>一些代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一些代码</span><br><span class="line">一些代码</span><br></pre></td></tr></table></figure><hr><h1 id="Markdown-分割线语法"><a href="#Markdown-分割线语法" class="headerlink" title="Markdown 分割线语法"></a>Markdown 分割线语法</h1><p>要创建一条水平分割线，可以在单独一行上使用三个或以上 <code>*</code> 或 <code>-</code> 或 <code>_</code> ,并且不能包含其他任何内容，<strong>推荐在使用分割线的单独行上下都进行空行</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">---</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">__<span class="emphasis">_</span></span></span><br></pre></td></tr></table></figure><p>上面三种效果都一样如下</p><hr><h1 id="Markdown-链接语法"><a href="#Markdown-链接语法" class="headerlink" title="Markdown 链接语法"></a>Markdown 链接语法</h1><p>若要创建一个超链接，你可以将超链接要显示的文本放在 <code>[]</code> 内，连接地址紧跟着放在 <code>()</code> 内</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个超链接 [<span class="string">xiaoyiovo的博客</span>](<span class="link">xiaoyiovo.top</span>)</span><br></pre></td></tr></table></figure><p>效果如下</p><p>这是一个链接 <a href="xiaoyiovo.top">xiaoyiovo的博客</a></p><h2 id="给连接增加标题"><a href="#给连接增加标题" class="headerlink" title="给连接增加标题"></a>给连接增加标题</h2><p>简介的标题是鼠标悬浮在超链接上会显示的内容，<strong>可选</strong>，若要添加标题，你可以在包裹着连接地址的 <code>()</code> 内，放在链接后以空格分隔并用 <code>&quot;&quot;</code> 包裹</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [<span class="string">xiaoyiovo的博客</span>](<span class="link">xiaoyiovo.top &quot;一个小小博客&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果如下</p><p>这是一个链接 <a href="xiaoyiovo.top" title="一个小小博客">xiaoyiovo的博客</a></p><h2 id="网址和E-Mail地址"><a href="#网址和E-Mail地址" class="headerlink" title="网址和E-Mail地址"></a>网址和E-Mail地址</h2><p>使用 <code>&lt; &gt;</code> 可以很方便的把URL或者E-Mail地址变成可点击的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">xiaoyiovo.top</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&lt;mail@expmple.com&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><a href="https://www.xiaoyiovo.top/">https://www.xiaoyiovo.top</a><br>&lt;mail@expmple&gt;</p><h2 id="带强调或其他格式化的链接"><a href="#带强调或其他格式化的链接" class="headerlink" title="带强调或其他格式化的链接"></a><span id="9.0.3">带强调或其他格式化的链接</span></h2><p>若要给链接进行 <strong><a href="#9.0.3">强调</a></strong> ，可以在链接前后使用和强调语法相同的方式来给链接进行强调，若要将链接表示为代码，请在链接语法的 <code>[]</code> 内使用 &#96;&#96; &#96;来包裹代码内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">带强调的超链接 <span class="strong">**[<span class="string">blog主页</span>](<span class="link">xiaoyiovo.top</span>)**</span></span><br><span class="line">带斜体的超链接 <span class="emphasis">*[<span class="string">blog主页</span>](<span class="link">xiaoyiovo.top</span>)*</span></span><br><span class="line">表示为代码的超链接 [<span class="string">`code`</span>](<span class="link">#9.0.3</span>)</span><br></pre></td></tr></table></figure><p>带强调的超链接 <strong><a href="xiaoyiovo.top">blog主页</a></strong><br>带斜体的超链接 <em><a href="xiaoyiovo.top">blog主页</a></em><br>表示为代码的超链接 <a href="#9.0.3"><code>code</code></a></p><h2 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h2><p>若要创建锚点链接，笔者没有找Markdown的语法，故用html语法，可以达到效果,直接使用 <code>&lt;span&gt; &lt;/span&gt;</code> 标签对，直接在Markdown中这样写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;9.0.4&quot;</span>&gt;</span></span>要创建锚点链接的文本<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><span id="9.0.4">要创建锚点链接的文本</span></p><h3 id="使用锚点链接"><a href="#使用锚点链接" class="headerlink" title="使用锚点链接"></a>使用锚点链接</h3><p>若要使用锚点链接，语法类似超链接，使用 <code>[]</code> 包裹锚点链接要显示的文本，后面紧跟 <code>(#在p标签内设置的id)</code> 以下是链接到上方文本的锚点链接示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">跳转至id为9.0.4的文本的锚点链接</span>](<span class="link">#9.0.4</span>)</span><br></pre></td></tr></table></figure><p>效果如下</p><p><a href="#9.0.4">跳转至id为9.0.4的文本的锚点链接</a></p><hr><h1 id="Markdown-图片语法"><a href="#Markdown-图片语法" class="headerlink" title="Markdown 图片语法"></a>Markdown 图片语法</h1><p>若要添加图像，可以使用 <code>!</code> ,后面紧跟图片的替代文本包裹在 <code>[]</code> 之中，之后再紧跟图片的链接包裹在 <code>()</code> 之中，如果你想，还可以在图片的链接后面添加图片标题用 <code>&quot;&quot;</code> 包裹并和图片链接用空格分隔</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片替代文本</span>](<span class="link">图片链接 “图片标题”</span>)   #语法格式</span><br><span class="line">![<span class="string">一张图片</span>](<span class="link">png2.jpg &quot;小图片&quot;</span>)       #示例</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2023/06/02/markdown-grammar/png2.JPG" alt="一张图片" title="小图片"></p><h2 id="使用本地图片"><a href="#使用本地图片" class="headerlink" title="使用本地图片"></a>使用本地图片</h2><p>若要使用本地图片，首先需要将如片放入你的Markdown文件同名的文件夹内，推荐在根目录下的_config.yml文件中修改此项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这样就可以在git中使用<code>hexo new</code>命令后自动创建同名资源文件夹</p><p>之后再图片链接处直接填上图片的全名</p><p>例如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片替代文本</span>](<span class="link">图片链接 “图片标题”</span>)   #语法格式</span><br><span class="line">![<span class="string">一张图片</span>](<span class="link">png2.jpg &quot;小图片&quot;</span>)       #示例</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2023/06/02/markdown-grammar/png2.JPG" alt="一张图片" title="小图片"></p><p>但是有时这样做可能会不起作用，你需要在git中安装这个包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image –save</span><br></pre></td></tr></table></figure><p> 安装完毕后即可如此使用，但是在例如Typora、MarkText这些编辑器中无法正常预览图片，这是正常的，并且笔者也没有找到解决方法，但是你可以使用如下命令静态部署至本地来查看效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h2><p>若要给图片增加链接，你可以把图片的Markdown语法用 <code>[]</code> 包裹，并在后面紧跟链接并用 <code>()</code> 包裹</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![一张图片</span>](<span class="link">png3.jpg</span>)](<span class="link">xiaoyiovo.top</span>)</span><br></pre></td></tr></table></figure><p>效果如下</p><p><a href="xiaoyiovo.top"><img src="/2023/06/02/markdown-grammar/png3.JPG" alt="一张图片"></a></p><hr><h1 id="Markdown-转义字符语法"><a href="#Markdown-转义字符语法" class="headerlink" title="Markdown 转义字符语法"></a>Markdown 转义字符语法</h1><p>若要显示原本用于语法的Markdown字符，可以在字符前面添加 <code>\</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\* 若是不加&quot;\&quot;符号，这将会被转义为一个无序列表</span><br><span class="line">\* 若是不加&quot;\&quot;符号，这将会被转义为一个无序列表</span><br></pre></td></tr></table></figure><p>效果如下</p><p>* 若是不加”&quot;符号，这将会被转义为一个无序列表</p><p>* 若是不加”&quot;符号，这将会被转义为一个无序列表</p><h2 id="可以被被转义的字符"><a href="#可以被被转义的字符" class="headerlink" title="可以被被转义的字符"></a>可以被被转义的字符</h2><table><thead><tr><th align="center">字符</th><th align="center">名称</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">反撇</td></tr><tr><td align="center">&#96;</td><td align="center">反引号</td></tr><tr><td align="center">*</td><td align="center">星号</td></tr><tr><td align="center">_</td><td align="center">下划线</td></tr><tr><td align="center">{ }</td><td align="center">大括号</td></tr><tr><td align="center">[ ]</td><td align="center">中括号</td></tr><tr><td align="center">#</td><td align="center">警号</td></tr><tr><td align="center">+</td><td align="center">加号</td></tr><tr><td align="center">-</td><td align="center">减号&#x2F;杠</td></tr><tr><td align="center">.</td><td align="center">点</td></tr><tr><td align="center">!</td><td align="center">叹号</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="特殊字符自动转义"><a href="#特殊字符自动转义" class="headerlink" title="特殊字符自动转义"></a>特殊字符自动转义</h2><p>在HTML文件中，有两个字符需要特殊处理 <code>&lt;</code> 和 <code>&amp;</code> 。<code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 用于标记HTML实体，如果你只是想使用这些符号，你必须要使用实体的方式，比如 <code>&amp;lt;</code> 和 <code>&amp;amp;</code> </p><p>Markdown允许你直接使用这些符号，它会自动帮你转义</p><hr><h1 id="Markdown-内嵌HTML标签"><a href="#Markdown-内嵌HTML标签" class="headerlink" title="Markdown 内嵌HTML标签"></a>Markdown 内嵌HTML标签</h1><p>对于Markdown涵盖之外的标签，都可以直接在文件里变直接使用HTML语法，不需要额外标注这是HTML语法或是Markdown语法，使用时只需将HTML标签添加到Markdown文本中</p><h2 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h2><p>HTML的行级标签如 <code>&lt;span&gt;&lt;/span&gt;</code> <code>&lt;cite&gt;&lt;/cite&gt;</code>  <code>&lt;del&gt;&lt;del&gt;</code> 不受限制，可以在Markdown的段落，列表，或是标题里任意使用，若你习惯，你可不用Markdown语法而直接使用HTML语法，比如图片和链接语法对于一些人来说使用HTML语法会更方便</p><p>HTML行内标签和块标签是不同的，在行内标签内使用Markdown语法是会被正常解析的</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个<span class="strong">**粗体**</span>文本，这是一个<span class="language-xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>斜体<span class="language-xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span>文本</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>这是一段斜体文本中的<span class="strong">**粗体并斜体文本**</span><span class="language-xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果i如下</p><p>这是一个<strong>粗体</strong>文本，这是一个<em>斜体</em>文本<br><em>这是一段斜体文本中的<strong>粗体并斜体文本</strong></em></p><h2 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h2><p>若要使用块标签如 <code>&lt;div&gt;&lt;/div&gt;</code>  <code>&lt;table&gt;&lt;/table&gt;</code>  <code>&lt;pre&gt;&lt;/pre&gt;</code>  <code>&lt;p&gt;&lt;/p&gt;</code> 标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始于结尾标签，不可以用空格或tab来缩进</p><p>Markdown会自动识别这些区块元素，避免在这些区块标签前后加上没有必要的其他标签，比如 <code>&lt;p&gt;&lt;/p&gt;</code> 标签</p><p>例如，在Markdown文件中加上一段HTML表格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一个段落</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;tr&gt;</span></span><br><span class="line"><span class="code">        &lt;td&gt;balabala&lt;/td&gt;</span></span><br><span class="line"><span class="code">    &lt;/tr&gt;</span></span><br><span class="line"><span class="code">&lt;/table&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">一个段落</span><br></pre></td></tr></table></figure><p>注意，Markdown语法在HTML块标签中不会被解析，比如你无法在HTML的块元素中使用Markdown的 <code>*强调*</code> </p><hr><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>若要添加一个表格，请使用三个或多个 <code>-</code> 来创建每列的列标题，并使用管道符 <code>|</code> 来分隔每列，你可以在表的任意一端添加管道符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|第一列标题|第二列标题|</span><br><span class="line">|--------|---------|</span><br><span class="line">|内容     |内容     |</span><br><span class="line">|sometext|sometext |</span><br></pre></td></tr></table></figure><p>效果如下</p><table><thead><tr><th>第一列标题</th><th>第二列标题</th></tr></thead><tbody><tr><td>内容</td><td>内容</td></tr><tr><td>sometext</td><td>sometext</td></tr></tbody></table><p>单元格宽度可以变化，所呈现的内容看起来相同</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|第一列标题|第二列标题|</span><br><span class="line">|---|---|</span><br><span class="line">|内容|内容|</span><br><span class="line">|sometext|sometext|</span><br></pre></td></tr></table></figure><p>效果如下</p><table><thead><tr><th>第一列标题</th><th>第二列标题</th></tr></thead><tbody><tr><td>内容</td><td>内容</td></tr><tr><td>sometext</td><td>sometext</td></tr></tbody></table><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><p>你可以在标题行中连字符左侧，右侧或是两侧添加 <code>:</code> 来设定本列的左对齐，右对齐或是居中对齐</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|左对齐列|居中对齐列|右对齐列|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|文本|文本|文本|</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐列</th><th align="center">居中对齐列</th><th align="right">右对齐列</th></tr></thead><tbody><tr><td align="left">文本</td><td align="center">文本</td><td align="right">文本</td></tr></tbody></table><h2 id="格式化表格中的文字"><a href="#格式化表格中的文字" class="headerlink" title="格式化表格中的文字"></a><span id="13.2">格式化表格中的文字</span></h2><p>你可以在表格中添加<strong>强调文字</strong>，<a href="#13.2">链接</a>和<code>代码</code>（仅可已使用行内代码而非代码块）</p><p>你不可以添加标题，块引用，列表，水平线，图像和HTML标签</p><h2 id="在表中转义管道字符"><a href="#在表中转义管道字符" class="headerlink" title="在表中转义管道字符"></a>在表中转义管道字符</h2><p>你可以在表格中使用HTML字符代码 <code>&amp;#124;</code> 来在表中添加管道 <code>|</code> 字符</p><hr><h1 id="Markdown-任务列表语法"><a href="#Markdown-任务列表语法" class="headerlink" title="Markdown 任务列表语法"></a>Markdown 任务列表语法</h1><p>任务列表使你可以创建带有复选框的项目列表，若要创建任务列表，可以在任务列表项前添加 <code>-</code> 和 <code>[ ]</code> 并在中间用空格分隔，若要让任务标记为已完成，可以在 <code>[ ]</code> 中间添加x，例如 <code>[x]</code> </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] 撰写第一篇Blog</span><br><span class="line"><span class="bullet">-</span> [ ] 学习C++</span><br><span class="line"><span class="bullet">-</span> [ ] 学习Python</span><br></pre></td></tr></table></figure><p>效果</p><ul><li><input checked disabled type="checkbox"> 撰写第一篇Blog</li><li><input disabled type="checkbox"> 学习C++</li><li><input disabled type="checkbox"> 学习Python</li></ul><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上，就是笔者整理的所有比较常用的Markdown语法，文章内容大量参考了<a href="https://markdown.com.cn/">Markdown 官方教程</a>中的内容并结合自己的实践做了一些修改，希望能帮助到正在看这篇文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/31/hello-world/"/>
      <url>/2023/05/31/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
