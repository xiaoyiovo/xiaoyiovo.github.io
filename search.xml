<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>攻防世界Crypto1-4题学习笔记</title>
      <link href="/2023/06/18/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto%E6%96%B9%E5%90%911-4/"/>
      <url>/2023/06/18/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto%E6%96%B9%E5%90%911-4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="第一题：base64-NO-GFSJ0522"><a href="#第一题：base64-NO-GFSJ0522" class="headerlink" title="第一题：base64 NO.GFSJ0522"></a>第一题：base64 NO.GFSJ0522</h1><p>题目描述：</p><p>元宵节灯谜是一种古老的传统民间观灯猜谜的习俗。 因为谜语能启迪智慧又饶有兴趣，灯谜增添节日气氛，是一项很有趣的活动。 你也很喜欢这个游戏，这不，今年元宵节，心里有个黑客梦的你，约上你青梅竹马的好伙伴小鱼， 来到了cyberpeace的攻防世界猜谜大会，也想着一展身手。<br>你们一起来到了小孩子叽叽喳喳吵吵闹闹的地方，你俩抬头一看，上面的大红灯笼上写着一些奇奇怪怪的 字符串，小鱼正纳闷呢，你神秘一笑，我知道这是什么了。</p><p>题目附件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Y3liZXJwZWFjZXtXZWxjb21lX3RvX25ld19Xb3JsZCF9</span><br></pre></td></tr></table></figure><p>由题目可知，这题和Base64编码相关，让我们来了解一下Base64编码的一般用途及特征：</p><p>Base64编码通常用于将给定字符串转换为可打印字符形式。，以下为base64编码后字符的特点：</p><ol><li><p>可打印字符：Base64编码将二进制数据转换为一组可打印字符，<strong>包括字母（A-Z，a-z）、数字（0-9）和一些特殊字符（如”+”和”&#x2F;“）</strong>，这样的编码结果可以在文本环境中进行传输和存储。</p></li><li><p>字符集：Base64编码使用64个字符作为基本字符集，因此得名Base64。这个字符集是由标准ASCII字符集中的一些字符组成的，可以确保编码结果在不同系统中的可互操作性。</p></li><li><p>固定长度增加：Base64编码会将原始数据的长度扩展为原始数据的1.25(4&#x2F;3)倍。例如，3个字节的数据编码后将变为4个字符，6个字节的数据编码后将变为8个字符。这种长度扩展是固定的，<strong>因此编码后的数据长度总是4的倍数</strong>。</p></li><li><p>编码而非加密：Base64是一种编码而非加密方法，它的目的是将给定字符串数据转换为可打印字符形式，而不是隐藏或保护数据。Base64编码是可逆的，也就是说可以将编码后的数据解码还原为原始数据。</p></li></ol><p>以上，是base64编码的特征，此时我们只需要在线找一个<a href="http://web.chacuo.net/charsetbase64">Base64解码工具</a>，然后将附件中的字符串输进去后解码，即可得到flag。</p><p><img src="/2023/06/18/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto%E6%96%B9%E5%90%911-4/png1.png" alt="Base64编码解码网站"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyberpeace&#123;Welcome_to_new_World!&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第二题：Caesar-NO-GFSJ0523"><a href="#第二题：Caesar-NO-GFSJ0523" class="headerlink" title="第二题：Caesar NO.GFSJ0523"></a>第二题：Caesar NO.GFSJ0523</h1><p>题目描述：</p><p>你成功的解出了来了灯谜，小鱼一脸的意想不到“没想到你懂得这么多啊！” 你心里面有点小得意，“那可不是，论学习我没你成绩好轮别的我知道的可不比你少，走我们去看看下一个” 你们继续走，看到前面也是热热闹闹的，同样的大红灯笼高高挂起，旁边呢好多人叽叽喳喳说个不停。你一看 大灯笼，上面还是一对字符，你正冥思苦想呢，小鱼神秘一笑，对你说道，我知道这个的答案是什么了</p><p>题目附件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oknqdbqmoq&#123;kag_tmhq_xqmdzqp_omqemd_qzodkbfuaz&#125;</span><br></pre></td></tr></table></figure><p>由题目可知，这题和凯撒有关，并且我们做的是加密方向的题，那么我们就可以想到凯撒密码，让我来了解一下凯撒密码及其特征：</p><p>凯撒密码是一种简单的替换密码，它将明文中的每个字母按照一个固定的偏移量进行移动，从而得到密文。以下是凯撒密码加密后字符串的一些特征：</p><ol><li>字母位移：凯撒密码将每个字母按照一个固定的偏移量进行移动。通常情况下，偏移量为正数，表示向右移动，偏移量为负数，则表示向左移动。例如，偏移量为1时，明文中的字母A会被加密为B，字母B会被加密为C，以此类推。<strong>偏移量通常为1-26</strong></li><li>字母模式保持：凯撒密码加密后，字母的相对顺序和出现频率会保持不变。如果在明文中某个字母的出现频率较高，那么在密文中对应的字母也会具有较高的频率。</li><li>周期性特征：凯撒密码具有周期性特征，因为字母表是一个循环结构。偏移量为26的倍数时，加密的结果与明文相同，即加密和解密是相同的操作。</li><li>仅加密字母：<strong>凯撒密码只对字母进行替换，对于非字母字符（如数字、标点符号等）会保持不变。</strong></li></ol><p>由以上特征可知，凯撒密码非常容易被穷举破解，我们只需在线找一个<a href="http://www.atoolbox.net/Tool.php?Id=778">凯撒密码加密&#x2F;解密工具</a> ，将密文输进去，偏移量一个一个试，由于有用的偏移量只有1-26，因此全部试完也不需要太多时间，在经过一番尝试后，得到以下结果：</p><p><img src="/2023/06/18/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto%E6%96%B9%E5%90%911-4/png2.png" alt="凯撒密码加密/解密网站"></p><p>偏移量为12，flag如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyberpeace&#123;you_have_learned_caesar_encryption&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第三题：Morse-NO-GFSJ0524"><a href="#第三题：Morse-NO-GFSJ0524" class="headerlink" title="第三题：Morse  NO.GFSJ0524"></a>第三题：Morse  NO.GFSJ0524</h1><p>题目描述：</p><p>小鱼得意的瞟了你一眼，神神气气的拿走了答对谜语的奖励，你心里暗暗较劲 想着下一个谜题一定要比小鱼更快的解出来。不知不觉你们走到了下一个谜题的地方，这个地方有些奇怪。 上面没什么提示信息，只是刻着一些0和1，感觉有着一些奇怪的规律，你觉得有些熟悉，但是就是想不起来 这些01代表着什么意思。一旁的小鱼看你眉头紧锁的样子，扑哧一笑，对你讲“不好意思我又猜到答案了。”(flag格式为cyberpeace{xxxxxxxxxx},均为小写)</p><p>题目附件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11 111 010 000 0 1010 111 100 0 00 000 000 111 00 10 1 0 010 0 000 1 00 10 110</span><br></pre></td></tr></table></figure><p>由题目可知，这题摩尔斯有关，由此可想到摩尔斯密码，让我们来了解一下摩尔斯密码及其特征：</p><p>摩尔斯密码是一种使用短音<code>.</code>和长音<code>-</code>来表示字母、数字和标点符号的编码系统。以下是摩尔斯密码的一些特征：</p><ol><li>点划组合：<strong>摩尔斯密码使用点<code>·</code>和划<code>—</code>组合来表示不同的字符。</strong>每个字符由一系列点和划的组合表示，例如字母”E”表示为一个点<code>·</code>，字母”T”表示为一个划<code>—</code>。</li><li>长短变化：摩尔斯密码中，点<code>·</code>和划<code>—</code>的长度不同，点的长度较短，划的长度较长。这种长度的变化是为了方便在听觉传输中的识别和区分。</li><li>字符间间隔：摩尔斯密码中，字符之间用短间隔表示（通常是一个点的时间），而不同单词之间用长间隔表示（通常是三个点的时间）。这样的间隔用于区分不同的字符和单词。</li><li>编码而非加密：<strong>摩尔斯密码是一种编码而非加密方法，它将字符转换为对应的摩尔斯码。摩尔斯密码是可逆的，也就是说可以根据摩尔斯码还原为原始字符。</strong></li><li>字符集的限制：<strong>摩尔斯密码最初设计用于传输英文字符，因此它的字符集受限于英文字母、数字和一些标点符号。</strong>虽然摩尔斯码可以扩展到其他字符集，但在实际应用中，常见的扩展字符通常使用拼音字母的变体。</li></ol><p>由以上特征可知，摩尔斯密码使用点<code>·</code>和划<code>—</code>组合来表示不同的字符。在此题中，仅仅只是将点<code>·</code>和划<code>—</code>换成了1和0（点<code>.</code>为1，划<code>—</code>为0）,因此我们只需要在线找一个<a href="https://www.lddgo.net/encrypt/morse">摩斯密码翻译器</a>，将题目附件中的内容输入进去并解码，即可得到明文</p><p><img src="/2023/06/18/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto%E6%96%B9%E5%90%911-4/png3.png" alt="在线摩斯密码翻译器"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MORSECODEISSOINTERESTING</span><br></pre></td></tr></table></figure><p>将解密出来的内容换成小写并放入cyberpeace{}中，即可得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cyberpeace&#123;morsecodeissointersting&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="第四题：Broadcast-NO-GFSJ0823"><a href="#第四题：Broadcast-NO-GFSJ0823" class="headerlink" title="第四题：Broadcast NO.GFSJ0823"></a>第四题：Broadcast NO.GFSJ0823</h1><p>题目描述：</p><p>粗心的Alice在制作密码的时候，把明文留下来，聪明的你能快速找出来吗？</p><p>题目附件：</p><p><img src="/2023/06/18/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto%E6%96%B9%E5%90%911-4/png4.png" alt="第四题题目附件"></p><p>给了一堆文件，就想着看看<code>task.py</code>里面有什么，于是打开发现flag就在里面写着</p><p><img src="/2023/06/18/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CCrypto%E6%96%B9%E5%90%911-4/png5.png" alt="task.py文件内容"></p><p>得到flag：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;fa0f8335-ae80-448e-a329-6fb69048aae4&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上，是笔者在<a href="https://adworld.xctf.org.cn/challenges/list">攻防世界题库</a>中Crypto方向第1至4题的解体思路，希望可以帮助到正在阅读本片文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 攻防世界 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Crypto </tag>
            
            <tag> base64 </tag>
            
            <tag> Caesar </tag>
            
            <tag> Morse </tag>
            
            <tag> Broadcast </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第二章</title>
      <link href="/2023/06/11/CPP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
      <url>/2023/06/11/CPP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C-的数据类型"><a href="#C-的数据类型" class="headerlink" title="C++的数据类型"></a>C++的数据类型</h1><p>计算机处理的对象是数据，而数据是以某种特定的形式存在的（例如整数、浮点数、字符等形式）。数据结构指的是数据的组织形式，例如，数组就是一种数据结构。</p><p>C++可以使用的数据类型如下</p><ul><li><p>基本类型</p><ul><li><p>整形</p><ul><li><p>短整型(short int)</p></li><li><p>整形(int)</p></li><li><p>长整型(long int)</p></li></ul></li><li><p>字符型(char)</p></li><li><p>浮点型</p><ul><li><p>单精度型(float)</p></li><li><p>双精度型(double)</p></li><li><p>长双精度型(long doubel)</p></li></ul></li><li><p>布尔型(bool)</p></li></ul></li><li><p>派生类型</p><ul><li><p>指针类型(*)</p></li><li><p>枚举类型(enum)</p></li><li><p>数组类型([ ])</p></li><li><p>结构体类型(struct)</p></li><li><p>共用体类型(union)</p></li><li><p>类类型(class)</p></li></ul></li><li><p>空类型(void)</p></li></ul><p>C++并没有统一规定各类数据的精度、数值范围和在内存中所占的字节数，各种C++编译系统根据自己的情况做出安排。下表列出了Visual C++数值型和字符型数据的情况。</p><h2 id="数值型和字符型数据的字节数，和数值范围"><a href="#数值型和字符型数据的字节数，和数值范围" class="headerlink" title="数值型和字符型数据的字节数，和数值范围"></a>数值型和字符型数据的字节数，和数值范围</h2><table><thead><tr><th align="left">类型</th><th align="left">类型标识符</th><th align="center">字节数</th><th align="left">数值范围</th></tr></thead><tbody><tr><td align="left">整形</td><td align="left">[signed] int</td><td align="center">4</td><td align="left">-2147483648 ~ +2147483648</td></tr><tr><td align="left">无符号整形</td><td align="left">unsigned [int]</td><td align="center">4</td><td align="left">0 ~ 4294967295</td></tr><tr><td align="left">短整形</td><td align="left">short [int]</td><td align="center">2</td><td align="left">-32768 ~ +32767</td></tr><tr><td align="left">无符号短整形</td><td align="left">unsigned short [int]</td><td align="center">2</td><td align="left">0 ~ 65535</td></tr><tr><td align="left">长整型</td><td align="left">long [int]</td><td align="center">4</td><td align="left">-2147483648 ~ +2147483648</td></tr><tr><td align="left">无符号长整形</td><td align="left">unsigned long [int]</td><td align="center">4</td><td align="left">0 ~ 4294967295</td></tr><tr><td align="left">字符型</td><td align="left">[signed] char</td><td align="center">1</td><td align="left">-128 ~ +127</td></tr><tr><td align="left">无符号字符型</td><td align="left">unsigned char</td><td align="center">1</td><td align="left">0 ~ 255</td></tr><tr><td align="left">单精度型</td><td align="left">float</td><td align="center">4</td><td align="left">3.4 x 10^-38 ~ 3.4 x 10^38</td></tr><tr><td align="left">双精度型</td><td align="left">double</td><td align="center">8</td><td align="left">1.7 x 10^-308 ~ 1.7 x 10^308</td></tr><tr><td align="left">长双精度型</td><td align="left">long double</td><td align="center">8</td><td align="left">1.7 x 10^-308 ~ 1.7 x 10^308</td></tr></tbody></table><hr><h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><h2 id="什么是常量"><a href="#什么是常量" class="headerlink" title="什么是常量"></a>什么是常量</h2><p>常量的值是不能改变的，一般从其字面形式即可判读其是否为常量。常量包括两大类：<strong>数值型常量</strong>（常数）和<strong>字符型常量</strong>。如70,0,-64为整形常量，6.8,-2.33为实型常量，包含在两个<code>&#39;</code>之间的数为字符常量，如’a’,’b’这种从字面形式即可识别的常量称为<strong>字面常量</strong>或<strong>直接常量</strong>。</p><h2 id="数值常量"><a href="#数值常量" class="headerlink" title="数值常量"></a>数值常量</h2><p>数值常量就是通常所说的<strong>常数</strong>。在C++中，数值常量是区分类型的，从字面意思即可识别其类型。</p><h3 id="整形常量（整数）的类型"><a href="#整形常量（整数）的类型" class="headerlink" title="整形常量（整数）的类型"></a>整形常量（整数）的类型</h3><p>一个常量怎样从字面上区分类型呢</p><ol><li><p>一个整数，若其值在-32768 ~ -32768范围内，那么则认为它是short int型，它可以赋值给short int型，int型和long int型。</p></li><li><p>一个整数，若其值在-2147483648 ~ +2147483648范围内，则认为它是long int型，它可以赋值给int型或long int型。</p></li><li><p>如果某一计算机系统的C++版本确定int与long int型数据在内存中占据的长度相同，则它们能够表示的数值范围相同。若如此，一个int型的常量也同时是一个long int型常量，可以赋值给int型或long int型变量。</p></li><li><p>常量无unsigned型。但是，一个非负值的整数可以赋值给unsigned型变量，只要它的范围不超过变量的取值范围即可。例如，将50000赋给一个unsigned short int 型变量是可以的，但是70000就不行，会溢出。</p></li></ol><p>一个整形常量可以用三种不同的方法表示。</p><ol><li><p>十进制整数。如15674 , -564 , 0等，在一个整常量后面加一个l或L，则认定是long int型常量，例如156l,655L,0L等，这往往用于函数调用中。如果函数的形式参数为long int，则要求实际参数也为long int型，此时用123作实际参数就不行，要用123L才可以。</p></li><li><p>八进制整数。在常数的开头加上一个数字0，就表示这是一个八进制形式表示的常数，如020表示这是八进制数20，相当于十进制数16。</p></li><li><p>十六进制整数。在常数的开头加一个数字0和一个英文字母X或x，就表示这是一个十六进制表示的常数，如0x20表示这是一个十六进制数20，相当于十进制数32。</p></li></ol><h3 id="浮点数的表示方法"><a href="#浮点数的表示方法" class="headerlink" title="浮点数的表示方法"></a>浮点数的表示方法</h3><p>一个浮点数可以用两种不同的方式表示。</p><ol><li><strong>十进制小数形式</strong>。如54.6 , -84.6等。它一般由整数部分和小数部分组成，可以省略其中之一，比如.23 , 54. , .0，但不能二者皆省略。C++编译系统把用这种形式的表示的浮点数一律按双精度常量处理，在内存中占8字节。如果在实数的数字之后加字母F或f，表示此数为长精度数(long double)。</li><li><strong>指数形式</strong>（即浮点形式）。一个浮点数可以写成指数形式，如3.14159可以表示为0.314159 x 10^1 , 3.14159 x 10^0 , 31.4159 x 10 ^-1 , 134.159 x 10^-2等形式。在程序中表示为0.314159e1 , 3.14159e0 , 31.4159e -1 , 314.159e -2 , 用字母e表示其后的数是以10为底的幂，如e12表示10^2。</li></ol><p>其一般形式为</p><p><strong>符号</strong> <strong>数字部分</strong> <strong>指数部分</strong></p><p>上面各数据中的0.314159 ,3.14159,31.4159,134.159等就是其中的数字部分。可以看到，由于指数部分的存在，使得同一个浮点数可用不同的指数形式来表示，数字部分中小数点的位置是浮动的。例如当指数为1时，小数点的位置在数字3前面，指数为0时，小数点的位置在数字3后面。浮点数的名字就源于此。</p><p>在程序中不论把浮点数写成小数形式还是指数形式，在内存中都是以指数形式（即浮点形式）存储的，例如无论在程序中写成134.159或是3.14159e0 , 0.314159e1等形式，在内存中都是以规范化的指数形式存放的，如下表所示：</p><table><thead><tr><th align="center">符号</th><th align="center">数字部分</th><th align="center">指数部分</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">.314159</td><td align="center">3</td></tr></tbody></table><p>数字部分必须小于1，同时，小数点后面第一个数字必须是一个非零数字，例如不能是0.0314159。因此，134.159或是3.14159e0 , 0.314159e1在内存中都表示为0.314159 x 10^3。储存单元分为两部分，一部分用来存放数字部分，另一部分用来存放指数部分。为了便于理解，上表使用十进制来表示的，实际上在存储单元内使用二进制来表示小数部分，用2的幂次来表示指数部分的。</p><p>对于以指数新式表示的数值常量，也都作为双精度常量处理。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++学习笔记_第一章</title>
      <link href="/2023/06/08/CPP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
      <url>/2023/06/08/CPP%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="最简单的C-程序"><a href="#最简单的C-程序" class="headerlink" title="最简单的C++程序"></a>最简单的C++程序</h1><h2 id="例1-1：输出一行字符"><a href="#例1-1：输出一行字符" class="headerlink" title="例1.1：输出一行字符"></a>例1.1：输出一行字符</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>        <span class="comment">//包含头文件 iostream</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;       <span class="comment">//使用C++的命名空间std</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    count&lt;&lt;<span class="string">&quot;this is a C++ program.&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果：</strong> this is a C++ program.</p><p><strong>分析：</strong></p><p>先看程序第三行，其中用<code>main</code>代表”主函数”的名字。每一个C++程序都必须有一个<code>main</code>主函数。<code>main</code>前面的<code>int</code>的作用是声明函数的数据类型为<strong>整形</strong>（标准C++规定main函数的数据类型必须为整形<code>int</code>）程序第六行的作用是向操作系统返回一个0值来表示程序执行成功，如果程序执行不成功，则会自动向操作系统返回一个非零值，一般为-1.</p><p>函数体是由大括号<code>&#123;&#125;</code>括起来的，例1.1中主函数内有一个以<code>cout</code>开头的语句。<code>cout</code>是由c和out两个单词组成，顾名思义，它是C++中用于输出的语句，我们可以把<code>cout</code>和<code>&lt;&lt;</code>组成的语句简称为cout语句，<code>&lt;&lt;</code>是插入运算符，与<code>cout</code>配合使用，在例1.1中它的作用是把它右侧的字符串插入到C++的输出队列cout中（输出队列也称输出流），C++系统将输出流cout的内容输出到系统指定的设备（一般为显示器）中，<strong>注意，C++所有语句最后都应当有一个分号<code>;</code></strong></p><p>此程序的第一行<code>#include &lt;iostream&gt;</code>，属于C++的预处理指令，它以<code>#</code>开头，与C++的语句相区别，行末没有分号，<code>#include &lt;iostream&gt;</code>是一个包含指令，作用是将文件 iostream 的内容包含到该指令所在的程序文件中，代替该指令。文件 iostream 的作用是向程序提供输入或输出是所需要的一些信息。 iostream 是由i-o-stream三个词组成，代表输入输出流的意思，由于这类文件通常放在程序单元的开头，所以称为”<strong>头文件</strong>“（header file）。在程序进行编译时，先对所有预处理命令进行处理，将头文件的具体内容代替<code>#include</code>指令，然后再对整个程序单元进行编译。</p><p>此程序的第二行<code>using namespace std;</code>的意思是”使用命名空间std“。C++标准库中的类和函数是在命名空间std中声明的，因此程序中如果需要用到C++标准库（此时需要用<code>#include</code>指令）,就需要用<code>using namespace std;</code>做声明，表示用到命名空间std中的内容。</p><p>作为C++初学者，例如本程序头部前两行不必深究，只需要知道，如果有程序有输入或输出时，必须使用<code>#include&lt;iostream&gt;</code>来提供必要的信息，同时也要使用<code>using namespace std;</code>使程序能够使用这些信息，否则程序编译时将出错。请读者在在联系写C++程序是也在程序中包含此两行。</p><h2 id="例1-2：求a，b之和"><a href="#例1-2：求a，b之和" class="headerlink" title="例1.2：求a，b之和"></a>例1.2：求a，b之和</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>           <span class="comment">//预处理指令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;          <span class="comment">//使用命名空间std</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>                    <span class="comment">//声明主函数main</span></span></span><br><span class="line"><span class="function"></span>&#123;                             <span class="comment">//函数主体开始</span></span><br><span class="line">    <span class="type">int</span> a,b,sum;              <span class="comment">//声明变量</span></span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;                <span class="comment">//输入变量a，b的值</span></span><br><span class="line">    sum=a+b;                  <span class="comment">//赋值语句</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;a+b=&quot;</span>&lt;&lt;sum&lt;&lt;endl;  <span class="comment">//输出语句</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;                 <span class="comment">//若程序正常结束，则返回0</span></span><br><span class="line">&#125;                             <span class="comment">//函数结束</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>本程序的作用是求两个整数a和b之和sum。程序中所有的<code>//</code>后面的内容都为注释，从它开始到本行末尾都为注释内容，<strong>注释是写给人看的而非机器</strong>，在程序编译时会忽略这些内容，注释可以加在程序中任何行的右侧，为便于程序的读者甚至是自己理解，常会在程序中添加许多注释来提高程序的可读性，在有的程序中，注释行可能占据篇幅的三分之一。</p><p>第五行是声明，定义变量a，b，sum为整形（int）变量。第六行是输入语句<code>cin</code>，<code>cin</code>是c和in两单词的结合，与<code>cout</code>类似，<code>cin</code>是C++系统定义的<strong>输入流对象</strong>。<code>&gt;&gt;</code>是“提取运算符”，与<code>cin</code>配合使用，其作用是从输入设备（如键盘）提取数据送到输入流<code>cin</code>中。我们可以把<code>cin</code>和<code>&gt;&gt;</code>组成的语句简称为cin语句。程序第七行在执行程序中的cin语句时，从键盘输入的第一个值赋给变量a，输入的第二个值赋给变量b，第七行将a+b的值赋给变量sum，第八行先输出字符串“a+b&#x3D;”，然后输出变量sum的值。<code>cout</code>语句中的<code>endl</code>（end line）是C++输出时的控制符，作用是换行。因此在输出变量sum的值之后换行。</p><p><strong>运行结果：</strong></p><p>在运行中从键盘输入以下信息（输入信息都为斜体表示以为区分输入和输出）</p><p><em>123 456</em></p><p>则输出为</p><p>a+b&#x3D;579</p><h2 id="例1-3：给两个数x和y，求两个数中的大者"><a href="#例1-3：给两个数x和y，求两个数中的大者" class="headerlink" title="例1.3：给两个数x和y，求两个数中的大者"></a>例1.3：给两个数x和y，求两个数中的大者</h2><p>本例中包含两个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span>        <span class="comment">//预处理指令</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>       <span class="comment">//定义max函数，函数值为整形，形式参数x，y为整形</span></span></span><br><span class="line"><span class="function"></span>&#123;                          <span class="comment">//max函数开始</span></span><br><span class="line">    <span class="type">int</span> z                  <span class="comment">//声明变量z为整形</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) z = x;       <span class="comment">//if语句，如果x大于y，则将x的值赋给z</span></span><br><span class="line">        <span class="keyword">else</span> z = y;        <span class="comment">//否则，将y的值赋给z</span></span><br><span class="line">    <span class="keyword">return</span>(z);             <span class="comment">//将z的值返回，通过max带回调用处</span></span><br><span class="line">&#125;                          <span class="comment">//本函数结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>                 <span class="comment">//声明主函数main</span></span></span><br><span class="line"><span class="function"></span>&#123;                          <span class="comment">//主函数开始</span></span><br><span class="line">    <span class="type">int</span> a,b,m;             <span class="comment">//声明变量</span></span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;             <span class="comment">//输入变量a，b的值</span></span><br><span class="line">    m = <span class="built_in">max</span>(a,b);          <span class="comment">//调用max函数，将得到的值赋给m</span></span><br><span class="line">    cout&lt;&lt;”max”&lt;&lt;m&lt;&lt;<span class="string">&#x27;\n&#x27;</span>   <span class="comment">//输出大于m的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;              <span class="comment">//若程序正常，则返回0</span></span><br><span class="line">&#125;                          <span class="comment">//主函数结束</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>本程序包含两个函数：主函数main和被调用的函数max。程序中第3-9行是max函数，他的作用是将x和y中较大者的值赋给变量z，<code>return</code>语句将z值返回给主函数main。返回值通过函数名max带回到main函数的调用处。主函数中<code>cin</code>语句的作用是输入a，b的值。mian函数中第5行为调用max函数，在调用时将实际参数a和b的值分别传送给max函数中的形式参数x和y。经过执行max函数得到一个返回值（即max函数中变量z的值），把这个值赋给变量m。然后通过<code>cuot</code>语句输出m的值</p><p><strong>运行结果：</strong></p><p><em>18 25</em></p><p>max&#x3D;25</p><p><strong>注意：</strong> 输入的两个数据之间用一个或多个空格间隔，不能以逗号或其他符号间隔，如输入</p><p><em>18， 25</em></p><p>或者</p><p><em>18；25</em></p><p>都是错误的，他不能正确输入第二个变量的值，使第二个变量有不可预见的值。</p><p>在上面的程序中，max函数出现在main函数之前，因此在main函数中调用max函数时，编译系统能识别max是已定义的函数名。若把两个函数的顺序调换，编译系统无法知道max函数是什么，因此按出错处理。</p><p>为了解决这个问题，在main函数中需要对被调用的函数做出声明，对上面的程序进行改写。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;       <span class="comment">//预处理指令</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span>                 <span class="comment">//声明主函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>;  <span class="comment">//对max函数进行声明</span></span><br><span class="line">    <span class="type">int</span> a,b,m;             <span class="comment">//声明变量</span></span><br><span class="line">    cin&gt;&gt;a&gt;&gt;b;             <span class="comment">//输入变量a，b的值</span></span><br><span class="line">    m = <span class="built_in">max</span>(a,b);          <span class="comment">//调用max函数，将得到的值赋给m</span></span><br><span class="line">    cout&lt;&lt;”max”&lt;&lt;m&lt;&lt;<span class="string">&#x27;\n&#x27;</span>   <span class="comment">//输出大于m的值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;              <span class="comment">//若程序正常，则返回0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>       <span class="comment">//定义max函数，函数值为整形，形式参数x，y为整形</span></span></span><br><span class="line"><span class="function"></span>&#123;                          <span class="comment">//max函数开始</span></span><br><span class="line">    <span class="type">int</span> z                  <span class="comment">//声明变量z为整形</span></span><br><span class="line">    <span class="keyword">if</span>(x &gt; y) z = x;       <span class="comment">//if语句，如果x大于y，则将x的值赋给z</span></span><br><span class="line">        <span class="keyword">else</span> z = y;        <span class="comment">//否则，将y的值赋给z</span></span><br><span class="line">    <span class="keyword">return</span>(z);             <span class="comment">//将z的值返回，通过max带回调用处</span></span><br><span class="line">&#125;                          <span class="comment">//本函数结束</span></span><br></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>程序第5行是对max函数进行声明，是为了让C++编译系统知道：max是一个函数，函数值是整形，函数有两个参数，都是整形。这样，在编译到第8行时，编译系统会知道max是已声明的函数，系统会系统就会根据函数声明时给定的信息对函数调用的合法性进行检查，如果二者不匹配（例如参数的个数或参数的类型与声明时所指定的不符），编译就会出错。</p><hr><h1 id="C-程序的构成和书写形式"><a href="#C-程序的构成和书写形式" class="headerlink" title="C++程序的构成和书写形式"></a>C++程序的构成和书写形式</h1><p>从上面几个例子中已经基本可以看出C++程序的结构和书写结构，现在归纳如下：</p><ol><li><p>一个C++程序可以由一个程序单位或多个程序单位构成。每一个程序单位作为一个文件。在程序编译时，编译系统分别对各个文件进行编译因此一个文件是一个编译单位</p></li><li><p>在一个程序中，可以包括以下三个部分:</p><ol><li><p><strong>预处理指令：</strong> #include指令</p></li><li><p><strong>全局声明部分：</strong> 在这部分中包括对用户自己定义的数据类型的声明和程序中所用到的变量的定义</p></li><li><p><strong>函数：</strong> 函数是实现操作的部分，因此函数是程序中最基础也是必须有的部分，每个人程序可以有一个或者多个函数，但是只能并必须有一个main函数</p></li></ol></li><li><p>一个函数由两部分组成</p><ol><li><p><strong>函数首部：</strong> 也就是函数的第一行、包括函数名、函数类型、函数属性、函数参数（形参）名、参数类型</p><p>例如例1.3中的max函数首部为</p><table><thead><tr><th align="center">int</th><th align="center">max</th><th align="center">(int</th><th align="center">x</th><th align="center">,</th><th align="center">int</th><th align="center">y)</th></tr></thead><tbody><tr><td align="center">函数类型</td><td align="center">函数名</td><td align="center">函数参数类型</td><td align="center">函数参数名</td><td align="center">,</td><td align="center">函数参数类型</td><td align="center">函数参数名</td></tr></tbody></table><p>一个函数名后面必须有一对括号，函数的参数可以缺省，如int main()</p></li><li><p><strong>函数体：</strong> 即函数首部下面大括号中的内容，如果一个函数中有多个大括号，最外层的一对{}是函数体的范围</p></li></ol></li></ol><p>              函数体一般包括：</p><p>              <strong>·   局部声明部分：</strong> </p><blockquote><p>包括对本函数中所有用到的类型、函数的声明及变量的定义。如例1.3中的<code>int a,b,m;</code>以及对所调用的函数声明<code>int max(int x,int y);</code></p></blockquote><blockquote><p>对数据的声明既可以放在函数之外，作用在全局。也可以放在函数内，作用在函数内。</p></blockquote><p>             <strong>·   执行部分：</strong></p><blockquote><p>由若干个执行语句组成，用来进行有关的操作，以实现函数的功能。</p><p>当然，在有的时候可以没有声明部分，也可以没有执行部分，例如</p><p>int a ( ) { }</p><p>是一个空函数，什么也不做，也是合法的</p></blockquote><ol start="4"><li><p>语句包括两类。一类是<strong>声明语句</strong>，如<code>int a,b</code> ，用来向编译系统通知某些信息，比如类型、函数、和变量的声明或定义，但是不起任何实际的作用，是<strong>非执行语句</strong>。另一类是<strong>执行语句，用来实现用户指定的操作</strong>，C++对每一种语句赋予一种特定的功能。语句是实现操作的基本操作，显然，没有语句的函数是没有意义的。C++语句必须以分号<code>;</code>结尾,如<code>a+b=c;</code>分号是语句的一个组成部分，没有分号就不是语句。</p></li><li><p><strong>一个C++程序总是从main函数开始执行</strong>，不论main函数在什么地方。</p></li><li><p><strong>类（class）是C++新增加的重要的数据类型</strong>，是C++对C的最重要发展。有了类，就可以实现变相对象程序设计方法中的封装、信息隐蔽、继承、派生、多态等功能。在一个类中可以包括数据成员，和成员函数，它们可以被指定为私有（private）或者公共（public）属性，私有的数据成员和成员函数只能被本类的成员函数所调用。</p></li><li><p>C++一行内可以书写多个语句，一个语句也可以写在多行上，一般情况下提倡一句一行，可以使程序清晰、有序</p></li><li><p>一个好的程序应有适当的注释，注释分两种：行内注释和跨行注释，行内注释只需使用<code>//</code>即可，<code>//</code>后的内容皆为注释，跨行注释语法格式为</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">要注释的内容</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>此语法格式沿用于C，在C++中同样适用。</p><hr><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上，是笔者整理的自我认为本章内重要的内容，内容多数来自《C++程序设计（第三版）》，希望可以帮助到正在阅读本片文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong> </p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程语言 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础学习笔记（暂缓）</title>
      <link href="/2023/06/06/network-foundation/"/>
      <url>/2023/06/06/network-foundation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络基础 </tag>
            
            <tag> 报文 </tag>
            
            <tag> 协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法熟悉，总结及测试</title>
      <link href="/2023/06/02/markdown_grammar/"/>
      <url>/2023/06/02/markdown_grammar/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Markdown-标题语法"><a href="#Markdown-标题语法" class="headerlink" title="Markdown 标题语法"></a>Markdown 标题语法</h1><p>若要创建标题,可以在标题内容前面添加 <code>#</code> , <code>#</code> 的数量多少表示这是几级标题</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">例如:</span><br><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br></pre></td></tr></table></figure><p>注意:为了稳定,需要在代表标题等级的 <strong>#</strong> 符号后表述完成后,与你的标题正文中使用空格来进程分隔</p><h2 id="如何避免转义"><a href="#如何避免转义" class="headerlink" title="如何避免转义"></a>如何避免转义</h2><p>在需要避免转义的语法前添加 <code>\</code> 即可</p><hr><h1 id="Markdown-段落语法"><a href="#Markdown-段落语法" class="headerlink" title="Markdown 段落语法"></a>Markdown 段落语法</h1><p>若想新建一个段落,可以使用Enter键换一行或多行来事件,并且多行只会被识别成一行。若想换多行,请见下一节</p><hr><h1 id="Markdown-换行语法"><a href="#Markdown-换行语法" class="headerlink" title="Markdown 换行语法"></a>Markdown 换行语法</h1><p>若想在Markdown中换一行,可以在行末添加两个以上空格然后再按Enter键(不推荐),或者直接按Enter键(推荐)。</p><h2 id="多次换行"><a href="#多次换行" class="headerlink" title="多次换行"></a>多次换行</h2><p>若想一次性进行多次换行,可以在行末添加<code>&lt;br&gt;</code></p><hr><h1 id="Markdown-强调语法"><a href="#Markdown-强调语法" class="headerlink" title="Markdown 强调语法"></a>Markdown 强调语法</h1><h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><p>若要加粗文本可以在需要加粗的文本前后各添加两个 <code>*</code> 或 <code>_</code> 来实现文本 <strong>加粗</strong></p><h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>若要斜体显示文本,可以在要斜体显示的文本前后各添加一个 <code>*</code> 或 <code>_</code> 来实现文本 <em>斜体</em></p><h2 id="粗体并斜体"><a href="#粗体并斜体" class="headerlink" title="粗体并斜体"></a>粗体并斜体</h2><p>若要使文本加粗并斜体显示,可以在要实现此效果的文本前后添加三个 <code>*</code> 或 <code>_</code> 来实现文本 <em><strong>加粗并斜体</strong></em></p><hr><h1 id="Markdown-引用语法"><a href="#Markdown-引用语法" class="headerlink" title="Markdown 引用语法"></a>Markdown 引用语法</h1><p>要创建块引用，可以在要引用的文本前加一个 <code>&gt;</code> 符号</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;引用内容</span><br></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是一些引用内容</p></blockquote><h2 id="多个段落的块引用"><a href="#多个段落的块引用" class="headerlink" title="多个段落的块引用"></a>多个段落的块引用</h2><p>块引用可以包含多个段落。为段落之间的空白行添加 <code>&gt;</code> 即可</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;多个段落的引用</span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;多个段落的引用</span></span><br></pre></td></tr></table></figure><p>效果如下</p><blockquote><p>这是一些引用内容</p><p>这是一些引用内容</p></blockquote><h2 id="嵌套块引用"><a href="#嵌套块引用" class="headerlink" title="嵌套块引用"></a>嵌套块引用</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;some thing</span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;&gt;some thing</span></span><br></pre></td></tr></table></figure><p>效果如下</p><blockquote><p>some thing</p><blockquote><p>some thing</p></blockquote></blockquote><h2 id="带有其他元素的块引用"><a href="#带有其他元素的块引用" class="headerlink" title="带有其他元素的块引用"></a>带有其他元素的块引用</h2><p>块引用可以包含其他 Markdown 格式的元素。但是并非所有元素都可以引用，需要自行实践。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; #### The quarterly results look great!</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; - Revenue was off the chart.</span></span><br><span class="line"><span class="quote">&gt; - Profits were higher than ever.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;  <span class="emphasis">*Everything*</span> is going according to <span class="strong">**plan**</span>.</span></span><br></pre></td></tr></table></figure><p>效果如下</p><blockquote><h4 id="The-quarterly-results-look-great"><a href="#The-quarterly-results-look-great" class="headerlink" title="The quarterly results look great!"></a>The quarterly results look great!</h4><ul><li><p>Revenue was off the chart.</p></li><li><p>Profits were higher than ever.</p><p><em>Everything</em> is going according to <strong>plan</strong>.</p></li></ul></blockquote><hr><h1 id="Markdown-列表语法"><a href="#Markdown-列表语法" class="headerlink" title="Markdown 列表语法"></a>Markdown 列表语法</h1><p>可以将多个条目组织成或有序列表。</p><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>若要创建有序列表，可以在每一个列表项前添加数字并紧跟一个英文句点 <code>.</code> ，数字可以不用按顺序排列，但是推荐以1进行起始</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> text</span><br><span class="line"><span class="bullet">2.</span> text</span><br><span class="line"><span class="bullet">3.</span> text</span><br></pre></td></tr></table></figure><p>或者不按顺序</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> text</span><br><span class="line"><span class="bullet">1.</span> text</span><br><span class="line"><span class="bullet">1.</span> text</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> text</span><br><span class="line"><span class="bullet">9.</span> text</span><br><span class="line"><span class="bullet">5.</span> text</span><br></pre></td></tr></table></figure><p>效果如下</p><ol><li>text</li><li>text</li><li>text</li></ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>若要创建无序列表，可以在每一个列表项前面添加 <code>-</code> 或者 <code>*</code> 或者 <code>+</code> ，缩进列表项可以创建嵌套列表</p><h3 id="以"><a href="#以" class="headerlink" title="以 -"></a>以 <code>-</code></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> text</span><br><span class="line"><span class="bullet">-</span> text</span><br><span class="line"><span class="bullet">-</span> text</span><br></pre></td></tr></table></figure><h3 id="以-1"><a href="#以-1" class="headerlink" title="以 *"></a>以 <code>*</code></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> text</span><br><span class="line"><span class="bullet">*</span> text</span><br><span class="line"><span class="bullet">*</span> text</span><br></pre></td></tr></table></figure><h3 id="以-2"><a href="#以-2" class="headerlink" title="以 +"></a>以 <code>+</code></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">+</span> text</span><br><span class="line"><span class="bullet">+</span> text</span><br><span class="line"><span class="bullet">+</span> text</span><br></pre></td></tr></table></figure><h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> text</span><br><span class="line"><span class="bullet">-</span> text</span><br><span class="line"><span class="bullet">    -</span> text</span><br><span class="line"><span class="bullet">    -</span> text</span><br><span class="line"><span class="bullet">-</span> text</span><br></pre></td></tr></table></figure><p>效果如下</p><p>常规</p><ul><li>text</li><li>text</li><li>text</li></ul><p>嵌套</p><ul><li>text</li><li>text<ul><li>text</li><li>text</li></ul></li><li>text</li></ul><h2 id="在列表中嵌套其他元素"><a href="#在列表中嵌套其他元素" class="headerlink" title="在列表中嵌套其他元素"></a>在列表中嵌套其他元素</h2><p>若要在保留列表的结构的前提下在列表中添加另一种元素，请将该元素缩进四个空格或者一个制表符，如下列所示</p><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> text</span><br><span class="line"><span class="bullet">*</span> text</span><br><span class="line"></span><br><span class="line"><span class="code">    another text</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> text</span><br></pre></td></tr></table></figure><p>效果如下</p><ul><li><p>text</p></li><li><p>text</p><p>another text</p></li><li><p>text</p></li></ul><h3 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> 一些无序列表项</span><br><span class="line"><span class="bullet">*</span> 另一些无序列表项</span><br><span class="line"></span><br><span class="line"><span class="code">    &gt;另外一些块项目</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span> 无序列表项</span><br></pre></td></tr></table></figure><p>效果如下</p><ul><li><p>一些无序列表项</p></li><li><p>另一些无序列表项</p><blockquote><p>另外一些块项目</p></blockquote></li><li><p>无序列表项</p></li></ul><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块通常采用四个空格或者一个制表符来缩进，当这些代码块在列表中时，你需要将他们缩进八个空格或者两个制表符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 一些代码</span><br><span class="line"><span class="bullet">2.</span> 一些东西</span><br><span class="line"><span class="code">        &lt;html&gt;</span></span><br><span class="line"><span class="code">          &lt;head&gt;</span></span><br><span class="line"><span class="code">            &lt;title&gt;TEST&lt;/title&gt;</span></span><br><span class="line"><span class="code">          &lt;/head&gt; </span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">3.</span> balabala</span><br></pre></td></tr></table></figure><p>效果如下</p><ol><li><p>一些代码</p></li><li><p>一些东西</p><pre><code>&lt;html&gt;  &lt;head&gt;    &lt;title&gt;TEST&lt;/title&gt;  &lt;/head&gt; </code></pre></li><li><p>balabala……..</p></li></ol><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>图片在被放在列表中也请使用一个制表符或四个空格来缩进</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 巴拉巴拉</span><br><span class="line"><span class="bullet">2.</span> 巴拉巴拉</span><br><span class="line"><span class="code">    ![someinmage](png1.png &quot;一张图片&quot;)</span></span><br><span class="line"><span class="code">3. 巴拉巴拉    </span></span><br></pre></td></tr></table></figure><p>效果如下</p><ol><li>一些内容</li><li>一些内容<br><img src="/2023/06/02/markdown_grammar/png1.png" alt="someinmage" title="一张图片"></li><li>一些内容</li></ol><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>你可以在一个有序列表中放入一个无序列表，也请使用一个制表符或者四个空格来缩进</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> First item</span><br><span class="line"><span class="bullet">2.</span> Second item</span><br><span class="line"><span class="bullet">3.</span> Third item</span><br><span class="line"><span class="bullet">    -</span> Indented item</span><br><span class="line"><span class="bullet">    -</span> Indented item</span><br><span class="line"><span class="bullet">4.</span> Fourth item</span><br></pre></td></tr></table></figure><p>效果如下</p><ol><li>First item</li><li>Second item</li><li>Third item<ul><li>Indented item</li><li>Indented item</li></ul></li><li>Fourth item</li></ol><hr><h1 id="Markdown-代码语法"><a href="#Markdown-代码语法" class="headerlink" title="Markdown 代码语法"></a>Markdown 代码语法</h1><p>若要将一段单词或短语表示为代码，请在要标记的单词前后各加一个 &#96;&#96; &#96; </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一些文本和一些<span class="code">`代码`</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p>一些文本和一些<code>代码</code></p><h3 id="转义反引号（-96-）"><a href="#转义反引号（-96-）" class="headerlink" title="转义反引号（&#96;）"></a>转义反引号（&#96;）</h3><p>若代码中也有反引号，可以代码包裹在 &#96;&#96;&#96; &#96; 中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">``代码中包括`</span>反引号<span class="code">`的部分`</span>`</span><br></pre></td></tr></table></figure><p>效果如下</p><p><code>代码中包括`反引号`的部分</code></p><h3 id="代码块-1"><a href="#代码块-1" class="headerlink" title="代码块"></a>代码块</h3><p>若要创建代码块，请将代码块中的代码每一行后缩进四个空格或者一个制表符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下</p><pre><code>&lt;html&gt;  &lt;head&gt;  &lt;/head&gt;&lt;/html&gt;</code></pre><h3 id="围栏式代码块"><a href="#围栏式代码块" class="headerlink" title="围栏式代码块"></a>围栏式代码块</h3><p>若要创建不缩进的代码块，请在代码块的开头及末尾的单独一行使用 &#96;&#96;&#96;&#96; &#96;</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>一些代码<br>一些代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">一些代码</span><br><span class="line">一些代码</span><br></pre></td></tr></table></figure><hr><h1 id="Markdown-分割线语法"><a href="#Markdown-分割线语法" class="headerlink" title="Markdown 分割线语法"></a>Markdown 分割线语法</h1><p>要创建一条水平分割线，可以在单独一行上使用三个或以上 <code>*</code> 或 <code>-</code> 或 <code>_</code> ,并且不能包含其他任何内容，<strong>推荐在使用分割线的单独行上下都进行空行</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">***</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">---</span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong"></span></span><br><span class="line"><span class="strong">__<span class="emphasis">_</span></span></span><br></pre></td></tr></table></figure><p>上面三种效果都一样如下</p><hr><h1 id="Markdown-链接语法"><a href="#Markdown-链接语法" class="headerlink" title="Markdown 链接语法"></a>Markdown 链接语法</h1><p>若要创建一个超链接，你可以将超链接要显示的文本放在 <code>[]</code> 内，连接地址紧跟着放在 <code>()</code> 内</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个超链接 [<span class="string">xiaoyiovo的博客</span>](<span class="link">xiaoyiovo.top</span>)</span><br></pre></td></tr></table></figure><p>效果如下</p><p>这是一个链接 <a href="xiaoyiovo.top">xiaoyiovo的博客</a></p><h2 id="给连接增加标题"><a href="#给连接增加标题" class="headerlink" title="给连接增加标题"></a>给连接增加标题</h2><p>简介的标题是鼠标悬浮在超链接上会显示的内容，<strong>可选</strong>，若要添加标题，你可以在包裹着连接地址的 <code>()</code> 内，放在链接后以空格分隔并用 <code>&quot;&quot;</code> 包裹</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一个链接 [<span class="string">xiaoyiovo的博客</span>](<span class="link">xiaoyiovo.top &quot;一个小小博客&quot;</span>)</span><br></pre></td></tr></table></figure><p>效果如下</p><p>这是一个链接 <a href="xiaoyiovo.top" title="一个小小博客">xiaoyiovo的博客</a></p><h2 id="网址和E-Mail地址"><a href="#网址和E-Mail地址" class="headerlink" title="网址和E-Mail地址"></a>网址和E-Mail地址</h2><p>使用 <code>&lt; &gt;</code> 可以很方便的把URL或者E-Mail地址变成可点击的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">xiaoyiovo.top</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&lt;mail@expmple&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><a href="https://www.xiaoyiovo.top/">https://www.xiaoyiovo.top</a><br>&lt;mail@expmple&gt;</p><h2 id="带强调或其他格式化的链接"><a href="#带强调或其他格式化的链接" class="headerlink" title="带强调或其他格式化的链接"></a><span id="9.0.3">带强调或其他格式化的链接</span></h2><p>若要给链接进行 <strong><a href="#9.0.3">强调</a></strong> ，可以在链接前后使用和强调语法相同的方式来给链接进行强调，若要将链接表示为代码，请在链接语法的 <code>[]</code> 内使用 &#96;&#96; &#96;来包裹代码内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">带强调的超链接 <span class="strong">**[<span class="string">blog主页</span>](<span class="link">xiaoyiovo.top</span>)**</span></span><br><span class="line">带斜体的超链接 <span class="emphasis">*[<span class="string">blog主页</span>](<span class="link">xiaoyiovo.top</span>)*</span></span><br><span class="line">表示为代码的超链接 [<span class="string">`code`</span>](<span class="link">#9.0.3</span>)</span><br></pre></td></tr></table></figure><p>带强调的超链接 <strong><a href="xiaoyiovo.top">blog主页</a></strong><br>带斜体的超链接 <em><a href="xiaoyiovo.top">blog主页</a></em><br>表示为代码的超链接 <a href="#9.0.3"><code>code</code></a></p><h2 id="锚点链接"><a href="#锚点链接" class="headerlink" title="锚点链接"></a>锚点链接</h2><p>若要创建锚点链接，笔者没有找Markdown的语法，故用html语法，可以达到效果,直接使用 <code>&lt;span&gt; &lt;/span&gt;</code> 标签对，直接在Markdown中这样写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;9.0.4&quot;</span>&gt;</span></span>要创建锚点链接的文本<span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><span id="9.0.4">要创建锚点链接的文本</span></p><h3 id="使用锚点链接"><a href="#使用锚点链接" class="headerlink" title="使用锚点链接"></a>使用锚点链接</h3><p>若要使用锚点链接，语法类似超链接，使用 <code>[]</code> 包裹锚点链接要显示的文本，后面紧跟 <code>(#在p标签内设置的id)</code> 以下是链接到上方文本的锚点链接示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">跳转至id为9.0.4的文本的锚点链接</span>](<span class="link">#9.0.4</span>)</span><br></pre></td></tr></table></figure><p>效果如下</p><p><a href="#9.0.4">跳转至id为9.0.4的文本的锚点链接</a></p><hr><h1 id="Markdown-图片语法"><a href="#Markdown-图片语法" class="headerlink" title="Markdown 图片语法"></a>Markdown 图片语法</h1><p>若要添加图像，可以使用 <code>!</code> ,后面紧跟图片的替代文本包裹在 <code>[]</code> 之中，之后再紧跟图片的链接包裹在 <code>()</code> 之中，如果你想，还可以在图片的链接后面添加图片标题用 <code>&quot;&quot;</code> 包裹并和图片链接用空格分隔</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片替代文本</span>](<span class="link">图片链接 “图片标题”</span>)   #语法格式</span><br><span class="line">![<span class="string">一张图片</span>](<span class="link">png2.jpg &quot;小图片&quot;</span>)       #示例</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2023/06/02/markdown_grammar/png2.JPG" alt="一张图片" title="小图片"></p><h2 id="使用本地图片"><a href="#使用本地图片" class="headerlink" title="使用本地图片"></a>使用本地图片</h2><p>若要使用本地图片，首先需要将如片放入你的Markdown文件同名的文件夹内，推荐在根目录下的_config.yml文件中修改此项</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>这样就可以在git中使用<code>hexo new</code>命令后自动创建同名资源文件夹</p><p>之后再图片链接处直接填上图片的全名</p><p>例如</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片替代文本</span>](<span class="link">图片链接 “图片标题”</span>)   #语法格式</span><br><span class="line">![<span class="string">一张图片</span>](<span class="link">png2.jpg &quot;小图片&quot;</span>)       #示例</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2023/06/02/markdown_grammar/png2.JPG" alt="一张图片" title="小图片"></p><p>但是有时这样做可能会不起作用，你需要在git中安装这个包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image –save</span><br></pre></td></tr></table></figure><p> 安装完毕后即可如此使用，但是在例如Typora、MarkText这些编辑器中无法正常预览图片，这是正常的，并且笔者也没有找到解决方法，但是你可以使用如下命令静态部署至本地来查看效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h2 id="链接图片"><a href="#链接图片" class="headerlink" title="链接图片"></a>链接图片</h2><p>若要给图片增加链接，你可以把图片的Markdown语法用 <code>[]</code> 包裹，并在后面紧跟链接并用 <code>()</code> 包裹</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">![一张图片</span>](<span class="link">png3.jpg</span>)](<span class="link">xiaoyiovo.top</span>)</span><br></pre></td></tr></table></figure><p>效果如下</p><p><a href="xiaoyiovo.top"><img src="/2023/06/02/markdown_grammar/png3.JPG" alt="一张图片"></a></p><hr><h1 id="Markdown-转义字符语法"><a href="#Markdown-转义字符语法" class="headerlink" title="Markdown 转义字符语法"></a>Markdown 转义字符语法</h1><p>若要显示原本用于语法的Markdown字符，可以在字符前面添加 <code>\</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">\* 若是不加&quot;\&quot;符号，这将会被转义为一个无序列表</span><br><span class="line">\* 若是不加&quot;\&quot;符号，这将会被转义为一个无序列表</span><br></pre></td></tr></table></figure><p>效果如下</p><p>* 若是不加”&quot;符号，这将会被转义为一个无序列表</p><p>* 若是不加”&quot;符号，这将会被转义为一个无序列表</p><h2 id="可以被被转义的字符"><a href="#可以被被转义的字符" class="headerlink" title="可以被被转义的字符"></a>可以被被转义的字符</h2><table><thead><tr><th align="center">字符</th><th align="center">名称</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">反撇</td></tr><tr><td align="center">&#96;</td><td align="center">反引号</td></tr><tr><td align="center">*</td><td align="center">星号</td></tr><tr><td align="center">_</td><td align="center">下划线</td></tr><tr><td align="center">{ }</td><td align="center">大括号</td></tr><tr><td align="center">[ ]</td><td align="center">中括号</td></tr><tr><td align="center">#</td><td align="center">警号</td></tr><tr><td align="center">+</td><td align="center">加号</td></tr><tr><td align="center">-</td><td align="center">减号&#x2F;杠</td></tr><tr><td align="center">.</td><td align="center">点</td></tr><tr><td align="center">!</td><td align="center">叹号</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="特殊字符自动转义"><a href="#特殊字符自动转义" class="headerlink" title="特殊字符自动转义"></a>特殊字符自动转义</h2><p>在HTML文件中，有两个字符需要特殊处理 <code>&lt;</code> 和 <code>&amp;</code> 。<code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 用于标记HTML实体，如果你只是想使用这些符号，你必须要使用实体的方式，比如 <code>&amp;lt;</code> 和 <code>&amp;amp;</code> </p><p>Markdown允许你直接使用这些符号，它会自动帮你转义</p><hr><h1 id="Markdown-内嵌HTML标签"><a href="#Markdown-内嵌HTML标签" class="headerlink" title="Markdown 内嵌HTML标签"></a>Markdown 内嵌HTML标签</h1><p>对于Markdown涵盖之外的标签，都可以直接在文件里变直接使用HTML语法，不需要额外标注这是HTML语法或是Markdown语法，使用时只需将HTML标签添加到Markdown文本中</p><h2 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h2><p>HTML的行级标签如 <code>&lt;span&gt;&lt;/span&gt;</code> <code>&lt;cite&gt;&lt;/cite&gt;</code>  <code>&lt;del&gt;&lt;del&gt;</code> 不受限制，可以在Markdown的段落，列表，或是标题里任意使用，若你习惯，你可不用Markdown语法而直接使用HTML语法，比如图片和链接语法对于一些人来说使用HTML语法会更方便</p><p>HTML行内标签和块标签是不同的，在行内标签内使用Markdown语法是会被正常解析的</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这是一个<span class="strong">**粗体**</span>文本，这是一个<span class="language-xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>斜体<span class="language-xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span>文本</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span></span>这是一段斜体文本中的<span class="strong">**粗体并斜体文本**</span><span class="language-xml"><span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>效果i如下</p><p>这是一个<strong>粗体</strong>文本，这是一个<em>斜体</em>文本<br><em>这是一段斜体文本中的<strong>粗体并斜体文本</strong></em></p><h2 id="块标签"><a href="#块标签" class="headerlink" title="块标签"></a>块标签</h2><p>若要使用块标签如 <code>&lt;div&gt;&lt;/div&gt;</code>  <code>&lt;table&gt;&lt;/table&gt;</code>  <code>&lt;pre&gt;&lt;/pre&gt;</code>  <code>&lt;p&gt;&lt;/p&gt;</code> 标签，必须在前后加上空行，以便于内容区分。而且这些元素的开始于结尾标签，不可以用空格或tab来缩进</p><p>Markdown会自动识别这些区块元素，避免在这些区块标签前后加上没有必要的其他标签，比如 <code>&lt;p&gt;&lt;/p&gt;</code> 标签</p><p>例如，在Markdown文件中加上一段HTML表格</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一个段落</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;tr&gt;</span></span><br><span class="line"><span class="code">        &lt;td&gt;balabala&lt;/td&gt;</span></span><br><span class="line"><span class="code">    &lt;/tr&gt;</span></span><br><span class="line"><span class="code">&lt;/table&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">一个段落</span><br></pre></td></tr></table></figure><p>注意，Markdown语法在HTML块标签中不会被解析，比如你无法在HTML的块元素中使用Markdown的 <code>*强调*</code> </p><hr><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>若要添加一个表格，请使用三个或多个 <code>-</code> 来创建每列的列标题，并使用管道符 <code>|</code> 来分隔每列，你可以在表的任意一端添加管道符</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|第一列标题|第二列标题|</span><br><span class="line">|--------|---------|</span><br><span class="line">|内容     |内容     |</span><br><span class="line">|sometext|sometext |</span><br></pre></td></tr></table></figure><p>效果如下</p><table><thead><tr><th>第一列标题</th><th>第二列标题</th></tr></thead><tbody><tr><td>内容</td><td>内容</td></tr><tr><td>sometext</td><td>sometext</td></tr></tbody></table><p>单元格宽度可以变化，所呈现的内容看起来相同</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|第一列标题|第二列标题|</span><br><span class="line">|---|---|</span><br><span class="line">|内容|内容|</span><br><span class="line">|sometext|sometext|</span><br></pre></td></tr></table></figure><p>效果如下</p><table><thead><tr><th>第一列标题</th><th>第二列标题</th></tr></thead><tbody><tr><td>内容</td><td>内容</td></tr><tr><td>sometext</td><td>sometext</td></tr></tbody></table><h2 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h2><p>你可以在标题行中连字符左侧，右侧或是两侧添加 <code>:</code> 来设定本列的左对齐，右对齐或是居中对齐</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|左对齐列|居中对齐列|右对齐列|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|文本|文本|文本|</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">左对齐列</th><th align="center">居中对齐列</th><th align="right">右对齐列</th></tr></thead><tbody><tr><td align="left">文本</td><td align="center">文本</td><td align="right">文本</td></tr></tbody></table><h2 id="格式化表格中的文字"><a href="#格式化表格中的文字" class="headerlink" title="格式化表格中的文字"></a><span id="13.2">格式化表格中的文字</span></h2><p>你可以在表格中添加<strong>强调文字</strong>，<a href="#13.2">链接</a>和<code>代码</code>（仅可已使用行内代码而非代码块）</p><p>你不可以添加标题，块引用，列表，水平线，图像和HTML标签</p><h2 id="在表中转义管道字符"><a href="#在表中转义管道字符" class="headerlink" title="在表中转义管道字符"></a>在表中转义管道字符</h2><p>你可以在表格中使用HTML字符代码 <code>&amp;#124;</code> 来在表中添加管道 <code>|</code> 字符</p><hr><h1 id="Markdown-任务列表语法"><a href="#Markdown-任务列表语法" class="headerlink" title="Markdown 任务列表语法"></a>Markdown 任务列表语法</h1><p>任务列表使你可以创建带有复选框的项目列表，若要创建任务列表，可以在任务列表项前添加 <code>-</code> 和 <code>[ ]</code> 并在中间用空格分隔，若要让任务标记为已完成，可以在 <code>[ ]</code> 中间添加x，例如 <code>[x]</code> </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [x] 撰写第一篇Blog</span><br><span class="line"><span class="bullet">-</span> [ ] 学习C++</span><br><span class="line"><span class="bullet">-</span> [ ] 学习Python</span><br></pre></td></tr></table></figure><p>效果</p><ul><li><input checked disabled type="checkbox"> 撰写第一篇Blog</li><li><input disabled type="checkbox"> 学习C++</li><li><input disabled type="checkbox"> 学习Python</li></ul><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>以上，就是笔者整理的所有比较常用的Markdown语法，文章内容大量参考了<a href="https://markdown.com.cn/">Markdown 官方教程</a>中的内容并结合自己的实践做了一些修改，希望能帮助到正在看这篇文章的你，最后，<strong>感谢你的阅读，祝你生活愉快，学习顺利</strong></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/05/31/hello-world/"/>
      <url>/2023/05/31/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
